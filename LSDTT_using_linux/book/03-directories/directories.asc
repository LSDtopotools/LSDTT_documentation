== Setting up your file system and keeping it clean **ESSENTIAL READING IF YOU ARE NEW TO LINUX**

The past decade has seen rapid advances in user interfaces, the result of which is that you don't really have to know anything about how computers work to use modern computing devices. I am afraid nobody associated with this software project is employed to write a slick user interface. In addition, we don't want a slick user interface since sliding and tapping on a touchscreen to get what you want does not enhance repoducible data analysis. So I am very sorry to say that to use this software you will need to know something about computers. 

If you are not familiar with Linux or directory structures this is essential reading.  

=== Files and directories

Everything in a computer is organised into files. These are collections of numbers and/or text that contain information and sometimes programs. These files need to be put somewhere so they are organised into directories which can be nested: i.e., a directory can be inside of another directory. Linux users are born with this knowledge, but users of more intuitive devices and operating systems are not. 

Our software is distributed as source code. These are files with all the instructions for the programs. They are not the programs themselves! Most of the instructions live in **objects** that have both a `cpp` and `hpp` file. They are stored in a directory together. Contained alongside these files are a few other directories. There is always a `TNT` folder for storing some files for matrix and vector operations. There will always be another directory with some variant of the word `driver` in it. Then there might be some other directories. **Do not move these files around! Their location relative to each other is important!!**.

Inside the folder that has `driver` in the name there will be yet more `cpp` files. There will also be files with the extension `make`. These `make` files are instructions to change the source code into a program that you can run. The `make` file assumes that files are in specific directories relative to each other so it is important not to move the relative locations of the `cpp` files and the various directories such as the `TNT` directory. If you move these files the you will not be able to `make` the programs. 

We tend to keep data separate from the programs. So you should make a **different** set of folders for your raw data and for the outputs of our programs. 

IMPORTANT: **DO NOT** put any spaces in the names of your files or directories. Frequently **LSDTopoTools** asks for paths and filenames, and tells them apart with spaces. If your filename or directory has a space in it,  **LSDTopoTools** will think the name has ended in the middle and you will get an error. 

=== Where to put your files

The instructions are slightly different for link:LSDTT_installation.html#_installing_lsdtopotools_using_docker[Docker installation] and link:LSDTT_installation.html#_installing_natively_on_a_linux_system[native Linux installation] of *LSDTopoTools*/

* If you are using Docker, there will be a file system on your host operating sytem, and another inside the Docker continer. 
** Inside the Docker container, the files are in the directory `/LSDTopoTools`
*** Inside this directory you will have a directory for the source code: `/LSDTopoTools/LSDTopoTools2`
*** You should also have a directory called `data`: `/LSDTopoTools/data`
*** And if you use our python mapping scripts another one with *LSDMappingTools: `/LSDTopoTools/LSDMappingTools`
** In your host operating system, you should also have a directory called `LSDTopoTools` but it is up to you where to put it. 

* If you are doing a native Linux installation (and this can work in MacOS, which is built on top of a Linux system, or in Windows using the Linux)
** You will need a directory somewhere called *LSDTopoTools*. 
*** Inside this directory you will have a directory for the source code: `/LSDTopoTools/LSDTopoTools2`. If you know how to modify your `.bashrc` file, you will want to add to your path the directory `/my/path/to/LSDTopoTools/LSDTopoTools2/bin`. You need to modify `/my/path/to` to match your actual directory structure.  
*** You should also have a directory called `data`: `/LSDTopoTools/data`
*** And if you use our python mapping scripts another one with *LSDMappingTools: `/LSDTopoTools/LSDMappingTools`

I would *HIGHLY* recommend a nested structure in your `data` directory. Make subdirectories organised by location so you are not mixing topographic data.  


=== OBSOLETE Directories in Vagrant

.This is a historical section only for people who have an old Windows (pre-Windows 10) operating system
*********************************************************
IMPORTANT: Only use these instructions if you have an old Windows operating system
*********************************************************

If you use our https://github.com/LSDtopotools/LSDTT_vagrantfiles[vagrantfiles] then you will need some specific directories. Our instructions assume this directory structure so if you have your own Linux box and you want to copy and paste things from our instructions then you should replicate this directory structure. 

IMPORTANT: If you use vagrant there will be directories in your host machine (i.e., your computer) and on the client machine (i.e., the Linux virtual machine that lives inside of you host machine). The file systems of these two computers are synced so if you change a file in one you will change the file in the other!

==== Vagrant directories in windows

In windows you should have a directory called something like `VagrantBoxes`. Inside this directory you need directories to store the vagrantfiles, and a directory called `LSDTopoTools`. The directories need to look like this

[source,console]
----
|-VagrantFiles
  |-LSDTopoTools
  |-Ubuntu32_FFTW
    | vagrantfile
  |-Ubuntu32
    | vagrantfile
----

NOTE: The names `VagrantBoxes` and `Ubuntu32`, `Ubuntu32_FFTW` don't really matter; you just need to have a place to contain all your files associated with vagrant and within this subdirectories for vagrantfiles. If your vagrantfile is for and Ubuntu 32 bit system that includes FFTW then you might call the folder `Ubuntu32_FFTW`.

IMPORTANT: There **MUST** be an `LSDTopoTools` directory one level above your vagrantfile. This directory name is **case sensitive**.

When you make the `LSDTopoTools` directory it will initially be empty. When you run `vagrant up` it will fill up with stuff (see below).

==== Vagrant directories in the client Linux machine

If you use our vagrantfiles to set up **LSDTopoTools**, they will construct a file system. It will have a directory `LSDTopoTools` in the root directory and within that directory will be two directories called `Git_projects` and `Topographic_projects`. The file system looks like this:

.Ubuntu file system
[source,console]
----
|-LSDTopoTools
  |-Git_projects
    |-LSDTopoTools_AnalysisDriver
      |- lots and lots of files and some directories
    |-LSDTopoTools_ChannelExtraction
      |- lots and lots of files and some directories
    |-More directories that hold source code
  |-Topographic_projects
    |-Test_data
      |- Some topographic datasets
----

These files are in the root directory so you can get to the by just using `cd \` and then the name of the folder:

[source,console]
----
$ cd /LSDTopoTools/Git_projects
----

Here is the clever bit: after you have run `vagrant up` these folders will also appear in your host system. But they will be in your `VagrantBoxes` folder. So in Linux the path to the git projects folder is `/LSDTopoTools/Git_projects` and in Windows the path will be something like `C:\VagrantBoxes\LSDTopoTools\Git_projects`. 



=== Know where your data is

When you run a makefile it will create a program sitting in some directory. Your data, if you are being clean and organised, will sit somewhere else. 

IMPORTANT: You need to tell the programs where the data is! People raised on smartphones and tablets seem to struggle with this. In many laboratory sessions I have the computational equivalent of this converation: Student "I can't get into my new apartment. Can you help?" Me: "Where did you put your keys?" Student: "I don't know." Please don't be that student. 

Most of our programs need to look for another file, sometimes called a *driver* file and sometimes called a *parameter* file. We probably should use a consistent naming convention for these files but I'm afraid you will need to live with our sloppiness. You get what you pay for, after all. 

The programs will be in your source code folders, so for example, you might have a program called `get_chi_profiles.exe` in the `/LSDTopoTools/Git_projects/LSDTopoTools_ChiMudd2014/driver_functions_MuddChi2014` directory. You then have to tell this program where the driver or parameter file is:

.A typical call to an **LSDTopoTools** program
[source,console]
----
$ pwd
/LSDTopoTools/Git_projects/LSDTopoTools_ChiMudd2014/driver_functions_MuddChi2014
$ ./git_get_profiles.exe /LSDTopoTools/Topographic_projects/Test_data/ Example.driver
----

In the above examples, `./git_get_profiles.exe` is calling the program. 

`/LSDTopoTools/Topographic_projects/Test_data/` is the folder where the driver/parameter file is. We tend to keep the topographic data and parameter files together. The final `/` is important: some of our programs will check for it but others won't (sorry) and they will not run properly without it. 

`Example.driver` is the filename of the driver/parameter file. 

In the above example it means that the parameter file will be in the folder `/LSDTopoTools/Topographic_projects/Test_data/` even though your program is in a different folder (`/LSDTopoTools/Git_projects/LSDTopoTools_ChiMudd2014/driver_functions_MuddChi2014/`).
    




