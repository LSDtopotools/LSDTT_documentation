
== Getting into a Linux shell

Getting a shell window will vary depending on your system. 

* If you are on a native linux system you should already know how to get a window into the shell (it is usually called a terminal window). If you don't know how to do that google is your friend ("ubuntu terminal").

* If you are using a virtual machine managed by Vagrant, one you either *ssh* or use *putty.exe* to access your virtual machine, you will be in a terminal window. You will find instructions on how to do this along with the Vagrant documentation. 

* If you are using Docker, you will run `docker` from command line (the Docker instructions will tell you how to do that) and you will end up in a shell within your Docker container. 

* If you are using https://mobaxterm.mobatek.net/[mobaXterm], like we do at the link::SDTT_installation##_getting_on_to_our_servers_with_mobaxterm[University of Edinburgh], then just start a new local session and then `ssh` into a server (e.g., `ssh burn`).   

== I am in a terminal window. Now what?

The first thing you need to know about is figuring out where you are, and how to move around. 

If you want to know all about this, go to https://swcarpentry.github.io/shell-novice/02-filedir/[software carpentry]. Here we will give you just the basics. 

Note that if you are in a Linux shell you will usually have the dollar symbol (`$`) as a command prompt. So if you see this:

.Shell prompt in native Linux
[source,console]
----
$
----

it means you will be entering a shell command.

On Docker, the shell is denoted by a hash symbol

.Shell prompt in Docker
[source,console]
----
#
----


=== Files and directories

Everything in a computer is organised into files. These are collections of numbers and/or text that contain information and sometimes programs. These files need to be put somewhere so they are organised into directories which can be nested: i.e., a directory can be inside of another directory. Linux users are born with this knowledge, but users of more intuitive devices and operating systems are not. 

* *If you want to know where you are* type `pwd`
+
[source,console]
----
$ pwd
/usr
----
+
In this case when you type `pwd` it tells you that you are in the `/usr` directory. The slash symbol: `/` separates directories. So if you have `/usr/Data/Rabbits` it means that the `Rabbits` directory is in the `Data` directory, which is in the `usr` directory.  
+
* *To see what is there in the directory* type `ls`:
+
[source,console]
----
$ ls
a_directory another_directory a.file Data
----
+
Both files and directories are listed when you type `ls`. If you type `ls -l` you get loads more information. See https://swcarpentry.github.io/shell-novice/02-filedir/[software carpentry] for more information. 
+
* *To move to a new directory*, type `cd`:
+
[source,console]
----
$ cd another_directory
$ pwd 
/usr/another_directory
----
+
* *To go up a directory* type `cd ..`
+
[source,console]
----
$ cd ..
$ pwd 
/usr
----
+
* *You can also jump straight to the directory you want*: just type `cd` and then the full path:
+
[source,console]
----
$ pwd
/I/am/lost/in/a/vortex/of/directories 
$ cd /usr/Data/Rabbits
$ pwd
/usr/Data/Rabbits
----
+
* *Going to your home directory*: type `cd ~`. Every Linux user has a home directory:
+
[source,console]
----
$ cd ~
$ pwd
/my/home/directory
----
+
* *If you want to make a new directory* type `mkdir` and then the directory name. 
+
[source,console]
----
$ mkdir a_new_directory
----
+
* *To move a file* type `mv` and then the name of the file and the name of the destination:
+
[source,console]
----
$ mv a.data b.data
----
+
* *To copy a file* type `cp` and then the name of the file and new file. This produces a duplicate with a new name and/or location. 
+
* *To delete a file* type `rm` and the filename. *This is irreversible so be careful!!*
+
* *To delete a directory* type `rmdir` and the directory name. *The directory must be empty*.
+
* *To delete a non-empty directory*, i.e. all the files and sub-directories within it, type `rm -r` and the directory name. *Be VERY careful where you type this command as it will delete everything in a directory. IF YOU GET THIS WRONG YOU CAN DELETE YOUR WHOLE FILE SYSTEM*. 

=== Useful basic tasks

There are a few tasks that are rather useful. I'll list two of them here:

* *Downloading files from the internet*: type `wget` and then the web address (with the `http://` and all that stuff). This seems to be *MUCH* faster that downloading stuff via a web browser. It is really useful for big files. 
+
* *Unzipping stuff*: type `tar -xzf` if you have a file with the extension `.tar.gz`. Again, this is much faster than doing it in a windows file explorer. If you have a `.zip` file, you can use `unzip file.name`. 
+
* 

=== Keyboard shortcuts

One of the reasons programmers love the shell is that there are loads of shortcuts. This speeds things up when you are working. The most useful ones seem to be:

* *Up arrow* lets you scroll through all your past commands.
* *Tab* will auto-complete file and directory names. So you only need to type the first few letters of a directory and then tab and it will give you the entire file or directory name. This is *SUPER CONVINIENT*. This feature almost makes learning linux worthwhile on its own. 
* *ctrl-a* or the *Home* key moves the cursor to the beginning of the line.
* *ctrl-e* or the *End* key moves the cursor to the end of the line. 
