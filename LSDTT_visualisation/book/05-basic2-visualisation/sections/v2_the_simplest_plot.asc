
=== A slightly different way to make plots

In the previous section, we made some plots by calling plotting routines in the package `LSDMapWrappers`. In this section we will use a command line tool to generate plots. 

The command line tool is called `PlotBasicRasters.py` and you give it arguments to make plots. It wraps various functions that live within several *LSDMappingTools* packages. 

It can be used as a general plotting tool but was primarily designed to interface with output from *LSDTopoTools*. 

The name of this script, `PlotBasicRasters.py` is perhaps a bit misleading because in fact you can make a large number of plots including draped plots, plots that include basins, and channel profile plots. 

==== The basic structure of a PlotBasicRasters.py call

`PlotBasicRasters.py` is called with a number of command line arguments. Once you are used to the syntax, you should also be able to use similar packages such as `PlotMOverNAnalysis.py` and `PlotLithoInfo.py`. 

The main elements of a call are:

* The call to the actual python script: `python PlotBasicRasters.py`
* The directory of your data: `-dir \My\Data\Location`
* The prefix of the data files `-fname RasterPrefix`

After that, there are a number of different command line options. For example:

* `-PD True`: This creates a drape plot. It expects there to be a raster that has `_hs` after the raster prefix. So for example if your raster prefix is `Xian` you need a raster file `Xian.bil` and a hillshade raster `Xian_hs.bil`
* `-PB True`: This creates a basin plot. It expects there to be a raster that has `_AllBasins` after the raster prefix. So for example if your raster prefix is `Xian` you need a raster file `Xian.bil` and a hillshade raster `Xian_AllBasins.bil`. In addition you need a `_BasinsInfo.csv` file. This is generated with basin printing functions in some of the *LSDTopoTools* programs. 

==== A basic hillshade using PlotBasicRasters.py

. First, make sure you have the LSDTT python environment activated.
.. In linux:
+
[source,console]
----
$ source activate LSDTT
----
+
.. In a windows *cmd.exe* prompt:
+
[source,console]
----
$ source activate LSDTT
----
+
. Now, go to the directory where you cloned https://github.com/LSDtopotools/LSDTMappingTools[LSDMappingTools]. *Unless you have altered your https://matplotlib.org/faq/environment_variables_faq.html[pythonpath] you will need to be in this directory for any calls to the python routines to work.*
+
. You also need to look up the location of your data.
.. If you are in Linux the location will be something like: `/LSDTopoTools/Topographic_projects/LSDTT_chi_examples` or `~/LSDTopoTools/Topographic_projects/LSDTT_chi_examples`.
.. If you are in Windows the locations will be something like: `c:\VagrantBoxes\LSDTopoTools\Topographic_projects\LSDTT_chi_examples`
+
. So, lets start with a basic call to plot the elevation over a hillshade. 
.. I am going to assume you have used a vagrant box but you are calling `PlotBasicRasters.py` from windows. Your system might differ so you'll need to update the path names. 
.. Here is the call:
+
[source,console]
----
$ python PlotBasicRasters.py -dir c:\VagrantBoxes\LSDTopoTools\Topographic_projects\LSDTT_chi_examples -fname Mega_divide -drape_fname Mega_divide -PD True
----
+
The resulting figure looks like:
+
.. The `-PD True` options turns on the drape plotting
.. The `-drape_fname Mega_divide` means that we will just drape the elevation over the hillshade.
+
. Why don't we alter this figure a bit. We can change the colourbar location, or the colourbar label, for example:
+
[source,console]
----
$ python PlotBasicRasters.py -dir c:\VagrantBoxes\LSDTopoTools\Topographic_projects\LSDTT_chi_examples -fname Mega_divide -drape_fname Mega_divide -PD True -drape_cbar_label "Elevation (m)" -drape_cbar_loc bottom
----
+





