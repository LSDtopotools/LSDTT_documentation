
=== More complex plots with PlotBasicRasters.py

.Reminder of basic call to PlotBasicRasters.py
*****************************************************
* First you need to be in the LSDTopoTools python environment. Read the section on <<Getting our LSDMappingTools and other tools>> and make sure you `activate` the LSDTT python environment. 
* The the components of a call are:
** The call to the actual python script: `python PlotBasicRasters.py`
** The directory of your data: `-dir \My\Data\Location`
** The prefix of the data files `-fname RasterPrefix`
** Then any optional flags you want. To see your choices run `python PlotBasicRasters.py -h` 
*****************************************************

We are now going to get a bit more complex and plot some basins and channels. 
The structure of the python call remain the same, we just call different flags for `PlotBasicRasters.py`.

==== A basic channel plot PlotBasicRasters.py

In the first example we will create a very simple channel plot. 

Simply call:

[source,console]
----
$ python PlotBasicRasters.py -dir c:\VagrantBoxes\LSDTopoTools\Topographic_projects\LSDTT_chi_examples -fname Mega_divide -dpi 100 -PCh True
----

The figure looks like this:

.A simple channel plot. 
image::images/Mega_divide_channels_chi_channels_and_basins.png[Channel plot,width=500]

The default of this plot is to plot the channels coloured by elevation, using a blue colour scale. Like most features of `PlotBasicRasters.py` there are a number of flags that can modify this plot. Many of the options involve selecting basins. So we will explore basin selection next. 

==== Plotting basins

Channels conduct water, sediment and nutrients downslope, but they can also communicate tectonic signals upslope. In many landscapes they set the pace of landscape evolution. Channels are orgaonised into connected networks, contained within drainage basins. 

*LSDTopoTools* analyses frequently involve sorting and selecting drainage basins. *LSDMappingTools* is designed to ingest and use the drainage basin information produced by *LSDTopoTools*. 

. We can start with a very basic basin plot:
+
[source,console]
----
$ python PlotBasicRasters.py -dir c:\VagrantBoxes\LSDTopoTools\Topographic_projects\LSDTT_chi_examples -fname Mega_divide -dpi 100 -PB True
----
+
. The resulting figure looks like this:
+
.A simple basin plot. 
image::images/Mega_divide_basins_selected_basins.png[A simple basin,width=500]
+
. The basin numbering is determined algorithmically, but you might want to rename your basins. To do this, you use the `-rename_dict` flag. This takes the form of a python dictionary. You have keys and values. Each key is the index of the basin (the number in the previous figure) and the value is the new name. These are separated by colons (`:`). To do multiple basins you separate these `key:value` pairs with commas. Here is an example:
+
[source,console]
----
$ python PlotBasicRasters.py -dir c:\VagrantBoxes\LSDTopoTools\Topographic_projects\LSDTT_chi_examples -fname Mega_divide -dpi 100 -PB True -rename_dict 0:supa,1:dupa
----
+
NOTE: when you include the `rename_dict` there should either be no spaces or the entire dictionary needs to be in quotation marks.
+
. The resulting figure looks like this
+
.A simple basin plot with renamed basins. 
image::images/Mega_divide_basins_selected_basins_v2.png[A simple basin with renamed basins,width=500]
+
. You can also select basins by using the `-basin_keys` flag. If you leave this blank, it assumes you want all basins. If you include a comma separated list, it only keeps the basins you have named. *The basin indices used are the original, not renamed basin indices*. That is, if you are using `-rename_dict` you need to keep track of the original indices of the basins. 
+
. An example is: 
+
[source,console]
----
$ python PlotBasicRasters.py -dir c:\VagrantBoxes\LSDTopoTools\Topographic_projects\LSDTT_chi_examples -fname Mega_divide -dpi 100 -PB True -rename_dict 0:supa,1:dupa -basin_keys 0,1,5,6
----
+
. Again, you must ensure there are no spaces in the list because if there are, the python code will assume this is a new flag and will crash. Here is what the figure looks like:
+
.A basin plot with selected basins with some renaming. 
image::images/Mega_divide_basins_selected_basins_v3.png[A simple basin, renamed and selected,width=500]

==== Plotting basins and channels

. The basin selection algorithms work with channel plotting as well. You can do this with the `-PCh` flag, or alternatively you can use the `-PBC` flag to have some semitransparent basins under the channels.  
+
[source,console]
----
$ python PlotBasicRasters.py -dir c:\VagrantBoxes\LSDTopoTools\Topographic_projects\LSDTT_chi_examples -fname Mega_divide -dpi 100 -basin_keys 0,1,5,6 -PBC True 
----
+
. The figure looks like:
+
.A basin plot with selected basins with some renaming channels. 
image::images/Mega_divide_BChElevation_chi_channels_and_basins.png[Selected channels,width=500]
+
. You can also change the colouring of the channels using a flag `-SimpleChFmt`. You can choose `elevation`, `drainage_area`, `source_key`, or `basin_key` to colour your channels. This works with both the `-PCh` and `-PBC` flags:
+
[source,console]
----
$ python PlotBasicRasters.py -dir c:\VagrantBoxes\LSDTopoTools\Topographic_projects\LSDTT_chi_examples -fname Mega_divide -dpi 100 -basin_keys 0,1,5,6 -PBC True -SimpleChFmt source_key 
----
+
. The figure looks like this:
+
.A basin plot with selected basins with some renaming channels. 
image::images/Mega_divideBSourceKey_chi_channels_and_basins.png[Selected channels,width=500]







