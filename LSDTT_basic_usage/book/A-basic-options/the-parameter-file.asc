[appendix]
== Analysis options for the LSDTT_BasicMetrics program

All *LSDTopoTools* parameter files have the same format:

[source,paramfile]
----
# comment
keyword: value
keywords with spaces: value
----

NOTE: The parameter file has a specific format, but the filename can be anything you want. We tend to use the extensions `.param` and `.driver` for these files, but you could use the extension `.MyDogSpot` if that tickled your fancy.

.LSDTopoTools parameter file format
************************************************
. The `#` denotes a comment. The program will ignore line that start with this symbol.
. Keywords or phrases are followed by a colon (`:`).
. Keywords *MUST be spelled exactly*. They are not case sensitive. If you have a leading space it will not work. If you have a space before the colon (`:`) it will not work. 
. The order of the keywords do not matter.
. If a keyword is not found, a default value is assigned. That is, you don't need to worry about forgetting an essential parameter since they all are assigned default values. 
************************************************


.Input format
*******************
Below are options for the parameter files. For these programs there are options for converting to point data, which requires georeferencing. Therefore, all DEMs must be in ENVI `bil` format (**DO NOT** use ArcMap's bil format: these are two different things. See the section <<Preparing your data>> if you want more details). 
The reason we use `bil` format is because it retains georeferencing which is essential to our file output since many of the files output to `csv` format with latitude and longitude as coordinates. 
*******************

=== Basic file input and output

[cols="1,1,2", options="header"]
.File input and output options. **These do not have defaults and MUST be declared**.
|===
|Keyword
|Input type
|Description

|write path
|string
|The path to which data is written. **The code will NOT create a path: you need to make the write path before you start running the program.**

|read path
|string
|The path from which data is read.

|write fname
|string
|The prefix of rasters to be written *without extension*.
For example if this is `Test` and you have selected `bil` format then a fill operation will result in a file called `Test_Fill.bil`.

|read fname
|string
|The filename of the raster to be read without extension. For example if the raster is `MyRaster.bil`, read fname will be `MyRaster`.


|channel heads fname
|string
|The filename of a channel heads file. You can import channel heads. If this is set to `NULL` then the channels will be calculated using a pixel threshold. 

|===

=== DEM preprocessing

[cols="1,1,1,2", options="header"]
.DEM preprocessing. These just help you clean data and perform very basic operations.
|===
|Keyword
|Input type
|Default value
|Description


|minimum_elevation
|float
|0
|If you have the `remove_seas` keyword set to true, the program will change any elevation node below this value to NoData.

|maximum_elevation
|float
|30000
|If you have the `remove_seas` keyword set to true, the program will change any elevation node above this value to NoData.

|remove_seas
|bool
|false
|If true, this changes extreme value in the elevation to NoData.

|min_slope_for_fill
|float
|0.001
|The minimum slope between pixels for use in the fill function. 

|raster_is_filled
|bool
|false
|If true, the code assumes the raster is already filled and doesn't perform the filling routine. This should save some time in computation, but make sure the raster really is filled or else you will get segmentation faults!

|only_check_parameters
|bool
|false
|If true, this checks parameter values but doesn't run any analyses. Mainly used to see if raster files exist. 

|===




=== Basic data output

[cols="1,1,1,2", options="header"]
.Basic printing operations. For simple rasters and network data that doesn't require chi analysis.
|===
|Keyword
|Input type
|Default value
|Description

|convert_csv_to_geojson
|bool
|false
|If true, this converts any csv file (except for slope-area data) to geojson format. This format takes up much more space than csv (file sizes can be 10x larger) but is georeferenced and can be loaded directly into a GIS. Also useful for webmapping. It assumes your raster is in UTM coordinates, and prints points with latitude and longitude in WGS84. 

|print_raster_without_seas
|bool
|false
|If true, prints a raster that has removed the seas (and very high peaks). This is useful if your NoDataValue is not registering and you use the `minimum_elevation`, `maximum_eleation`, and `remove_seas` flags to correct this. *WARNING!* This overwrites your original raster. 

|print_fill_raster
|bool
|false
|If true, prints the fill raster.

|write_hillshade
|bool
|false
|If true, prints the hillshade raster. The format of this is stupidly different from other printing calls for a stupid inheritance reason. Try to ignore. Most GIS routines have a hillshading options but for some reason they look crappier than our in-house hillshading. I'm not sure why but if you want a hillshade I recommend using this function. 

|print_distance_from_outlet
|bool
|false
|Prints a raster that gives the distance from the outlet. 

|print_wiener_filtered_raster
|bool
|false
|This returns a filtered raster using something called a https://en.wikipedia.org/wiki/Wiener_filter[Wiener filter]. It is a rather fancy way to smooth topography. Note that this uses a memory-hungry https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/[fourier transform] and so will struggle or even crash on large DEMs. 

|===


=== Surface fitting

[cols="1,1,1,2", options="header"]
.These are options for polynomial surface fitting. 
|===
|Keyword
|Input type
|Default value
|Description

|surface_fitting_radius
|float
|30
|The radius of the polynomial window over which the surface is fitted. If you have lidar data, we have found that a radius of 5-8 metres works best.  

|print_smoothed_elevation
|bool
|false
|Prints a raster of elevations that have been smoothed over the polynomial window

|print_slope
|bool
|false
|If true, prints the topographic gradient raster.


|print_aspect
|bool
|false
|If true, prints the aspect raster. 

|print_curvature
|bool
|false
|If true, prints the curvature raster. 

|print_planform_curvature
|bool
|false
|If true, prints the planform curvature raster. That is the curvature of the countour lines. 

|print_profile_curvature
|bool
|false
|If true, prints the profile curvature raster. That is the curvature along the line of steepest descent. 

|print_tangential_curvature
|bool
|false
|If true, prints the tangential curvature raster. This is the curvature perpendicular to the line of steepest descent. A bit like the planform curvature but adjusted for slope. 

|print_point_classification
|bool
|false
|If true, prints a point classification raster. This takes the value 1 if there is a peak, 2 if there is a depression and 3 if there is a saddle.  

|===


=== Drainage area extraction


[cols="1,1,1,2", options="header"]
.These are options for drainage area extraction. 
|===
|Keyword
|Input type
|Default value
|Description

|surface_fitting_radius
|float
|30
|The radius of the polynomial window over which the surface is fitted. If you have lidar data, we have found that a radius of 5-8 metres works best.  

|print_dinf_drainage_area_raster
|bool
|false
|If true, prints drainage area calculated using the d-infinity algorithm. 

|print_d8_drainage_area_raster
|bool
|false
|If true, prints drainage area calculated using the d8 algorithm. This is simply the steepest of the 8 nearest neighbours. 

|print_QuinnMD_drainage_area_raster
|bool
|false
|If true, prints drainage area calculated using the Quinn algorithm. This is a multiple flow direction algorithm. 

|print_FreemanMD_drainage_area_raster
|bool
|false
|If true, prints drainage area calculated using the Freeman algorithm. This is a multiple flow direction algorithm. 

|print_MD_drainage_area_raster
|bool
|false
|If true, prints drainage area calculated using the multidirectional algorithm. This is a multiple flow direction algorithm. Unlike the Quinn and Freeman algorithms it makes no attempt whatsoever to control dispersion. 


|===

=== Basic channel extraction and printing

This simply gets a channel network and prints its location. It is a rather rudimentary way of seeing where channels are. More advanced options are in the next table. 

[cols="1,1,1,2", options="header"]
.These are options for drainage area extraction. 
|===
|Keyword
|Input type
|Default value
|Description

|print_stream_order_raster
|bool
|false
|If true, prints the stream order raster (but printing this to csv is more efficient, use `print_channels_to_csv`).

|print_channels_to_csv
|bool
|false
|Prints the channel network to a csv file. Includes stream order and other useful information. Much more memory efficient than printing the whole raster. It prints *all* channel nodes across the DEM rather than printing nodes upstream of selected basins. *If you want to see the channels selected for chi analysis use `print_chi_data_maps`.*

|print_junction_index_raster
|bool
|false
|If true, prints the junction index raster (but printing this to csv is more efficient, use `print_junctions_to_csv`).

|print_junctions_to_csv
|bool
|false
|Prints the junction indices to a csv file. Much more memory efficient than printing the whole raster. 

|print_junctions_angles_to_csv
|bool
|false
|Prints the junction angles of each junction to a csv file.

|===



=== More advanced channel and basin selection

These options give you a bit of control over selecting basins. 

NOTE: If you just want the largest complete basin, set `find_largest_complete_basins: true` *AND* `maximum_basin_size_pixels: 10000000000000` (or any really big number).

[cols="1,1,1,3", options="header"]
.Options for determining which channels and basins to analyse, including settings for the fill function.
|===
|Keyword
|Input type
|Default value
|Description


|find_basins
|bool
|false
|If this is true, it i) Gets all the basins in a DEM and takes those between the `minimum_basin_size_pixels` and `maximum_basin_size_pixels`. It then removes basins that are influenced by the edge of the DEM, and then removes nested basins. The reason for removing basins draining the edge is that all drainage areas and chi coordinates require that the basin is complete. If not, your areas and chi coordinate, will be incorrect. 

|BaselevelJunctions_file
|string
|NULL
|You can write a file that contains a list of junction numbers (to see where they are, use `print_junctions_to_csv`) to get basins above specific junctions only. The file format is just a list of integers. 

|CHeads_file
|string
|NULL
|This reads a channel heads file. It will supercede the `threshold_contributing_pixels` flag. That is, if you give a valid CHeads filename the code will ignore the threshold pixels and use the sources in the file instead. You can calculate channel heads using our https://github.com/LSDtopotools/LSDTopoTools_ChannelExtraction[channel extraction tools]. The file needs to be a *csv* file and you pass the filename *WITHOUT EXTENSION*. The format of the filename is one with 5 columns: `node_index,row,col,x,y`. The `x,y` coordinates are in local UTM coordinates.  

|threshold_contributing_pixels
|int
|1000
|The number of pixels required to generate a channel (i.e., the source threshold).

|minimum_basin_size_pixels
|int
|5000
|The minimum number of pixels in a basin for it to be retained. This operation works on the baselevel basins: subbasins within a large basin are retained. 

|maximum_basin_size_pixels
|int
|500000
|The maximum number of pixels in a basin for it to be retained. This is only used by `find_complete_basins_in_window` but that algorithm for selecting basins is the default. 

|extend_channel_to_node_before_receiver_junction
|bool
|true
|If true, the channel network will extend beyond selected baselevel junctions downstream until it reaches the pixel before the receiver junction. If false, the channel simply extends upstream from the selected basin. The reason for this switch is because if one if extracting basins by drainage order, then the, say, a 2nd order drainage basin starts at the node immediately upstream of the most upstream 3rd order junction. 

|only_take_largest_basin
|bool (true or 1 will work) 
|false
|If this is true, a chi map is created based only upon the largest basin in the raster. 

|print_basin_raster
|bool
|false
|If true, prints a raster with the basins. *IMPORTANT!* This should be set to true if you want to use any of our https://github.com/LSDtopotools/LSDMappingTools[python plotting functions] that use basin information. Note that if this is true it will also print csv files with basin numbers and source numbers to assist plotting.  

|print_chi_data_maps
|bool
|false
|This prints the channel networks (a bit like `print_channels_to_csv`) but contains *MUCH* more informatioon: elevation, flow distance, dranage area (from d8), the chi coordinate (have a look at our link:LSDTT_chi_analysis.html[chi documentation for more details]) and various keys to sources and basins so you can colour or sort channels by basin or tributary if you want. If you are going to work with channels using *LSDTT_BasicMetrics* this is the output to use. 

|===

==== Basic parameters for the chi coordinate


[cols="1,1,1,2", options="header"]
.Parameters for calculating the chi coordinate.
|===
|Keyword
|Input type
|Default value
|Description

|A_0
|float
|1
|The _A~0~_ parameter (which nondimensionalises area) for chi analysis. This is in m^2^. Note that when _A~0~_ = 1 then the slope in chi space is the same as the channel steepness index (often denoted by _k~s~_). 

|m_over_n
|float
|0.5
|The _m/n_ parameter (sometimes known as the concavity index) for calculating chi. Note that if you do any _m/n_ analysis (either `calculate_MLE_collinearity` or `print_profiles_fxn_movern_csv`) this _m/n_ value will be replaced.


|===



=== Example parameter files

We have a number of example parameter files in the repository https://github.com/LSDtopotools/LSDTT_chi_examples[LSDTT_chi_examples]. The chapter on examples will walk you through the various things these files do. 





