
image::images/LSD-logo.png[width=200]
link:index.html[Return to main *LSDTopoTools* landing page]


== Introduction and overview

This document takes you through an inital *LSDTopoTools* analysis. Through the tutorials contained here we will demonstrate how our analysis programs run: they all share a common interface.

.Before you start
*********************************************
Before you start you need to install *LSDTopoTools*. If you haven't done that, please follow the link below.

link:LSDTT_installation.html[Instructions on how to install LSDTopoTools]

In addition, you will need to use some basic linux shell commands. If you have never done this before I suggest reading this brief introduction: link:LSDTT_using_linux.html[Basic use of the linux shell].
*********************************************

=== The basic structure of an analysis

Our analyses are packaged into separate programs. They are run from the Linux shell. All of our programs operate the same way:

* You call the programs (such as `lsdtt-basic-metrics` and `lsdtt-channel-extraction`) from the command line. 
* These programs work on topographic data, and they use a parameter file that tells the programs what to do with the data. 

The basic structure looks like this:

.All *LSDTopoTools* analyses work like this.
image::images/basic_analysis.png[The basic structre of an LSDTopoTools analysis, width=400]

==== Running a typical analysis

In the next section we will walk you though an analysis. However, reading this will help you understand where you are going, so we recommend you read the whole thing!

* You run the program from a terminal window
* You can supply the program with either a directory, a parameter file, both of these things or none of these things. 
* If you don't supply a parameter filename, the program will assume the parameter file is called `LSDTT_parameters.driver`
* If the parameter file doesn't exist, you will get an error message. 

Any of the following calls to one of the programs will work, as long as your files are in the right place:
+
[source,console]
----
$ lsdtt-basic-metrics 
$ lsdtt-basic-metrics /LSDTopoTools/Topographic_projects/A_project
$ lsdtt-basic-metrics AParameterFile.param
$ lsdtt-basic-metrics /LSDTopoTools/Topographic_projects/A_project AParameterFile.param
----
+
* The program name (`lsdtt-basic-metrics`), the directory name (`/LSDTopoTools/Topographic_projects/A_project`) and the parameter file name (`AParameterFile.param`) will change but all *LSDTopoTools* calls follow this same basic structure.
* Now, all parameter files have these basic elements in them:
+
[source,paramfile]
----
read path: /LSDTopoTools/Topographic_projects/A_project
write path: /LSDTopoTools/Topographic_projects/A_project
read fname: Data_prefix
write fname: Data_prefix
----
+
*You need to change the path and fnames to reflect your data!*
+
If the read and write path are not specified, then the program will assume the data is in the same directory as the program is being run. 

==== How do I change my parameter files?

You can edit your parameter files in a text editor: this is just a program that edits plain text. *DO NOT* use a word processor. These modify file types. There are many options for text editors but we like http://brackets.io/[Brackets], or https://atom.io/[Atom] is also a nice alternative.

However, editing the paths can be a bit annoying if you are moving data from place to place, so we have a python script, called `LSDTTParamfileUpdater.py` that updates the paths in the parameter file for you. The way you run that is:

. Download the script into your data folder (i.e. in the second terminal window you have open above):
+
[source,console]
----
$ wget https://raw.githubusercontent.com/LSDtopotools/LSDAutomation/master/LSDTTParamfileUpdater.py
----
+
. Run the file
+
[source,console]
----
$ python LSDTTParamfileUpdater.py
----
+
. Once you've done this you are ready to call the program!
