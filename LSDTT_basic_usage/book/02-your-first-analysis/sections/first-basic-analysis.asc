.Before you start
*********************************************
Before you start you need to install *LSDTopoTools*. If you haven't done that, please follow the link below.

link:LSDTT_installation.html[Instructions on how to install LSDTopoTools]

In addition, you will need to use some basic linux shell commands. If you have never done this before I suggest reading this brief introduction: link:LSDTT_using_linux.html[Basic use of the linux shell].
*********************************************

=== Your first analysis using LSDTopoTools

We are going to run an *LSDTopoTools* program that is used for basic topographic analysis.

==== Download and run the setup tool

. You need to open a terminal or shell window. If you don't know what this is link:LSDTT_installation.html[read the installation instructions].
. First open a terminal window. This will be in either a vagrant server, a docker container, an NX window or your native linux system, depending on how you link:LSDTT_installation.html[installed *LSDTopoTools*]. Once you are in a terminal window, you will see some text and then a `$` symbol which tells you that the linux machine is waiting for a command. Type your commands after this symbol (in docker this might be a `#` symbol).
+
. We are going to download a python script into your home directory. The `cd ~` command gets you to your home diretory in linux. Go there and then download a file using `wget`:
+
[source,console]
----
$ cd ~
$ wget https://raw.githubusercontent.com/LSDtopotools/LSDAutomation/master/LSDTopoToolsSetup.py
----
+
NOTE: Make sure the `wget` call (with the web address) is all on one line.
+
. Now we run the setup tool. Doing this will trigger a bunch of stuff that will take a few minutes. You could waste some time https://twitter.com/David_Rudnick/status/923196115910119424[on the internet].
+
[source,console]
----
$ python LSDTopoToolsSetup.py -id 0
----
+
. If you are on a native linux machine or Edinburgh servers, this will install *LSDTopoTools* in your home directory. In docker or vagrant it will install in the root directory (`/`).

==== Add the basic analysis directory to your path

We find it is easist to keep your data seperate from the source code. But unless you want to have lots of terminal windows open you need to call *LSDTopoTools* from your data directories. That is rather annoying so to avoid that you need to add the location of the *LSDTopoTools* directories to your path. 

In Vagrant or Docker, you do this with
[source,console]
----
$ PATH=$PATH:/LSDTopoTools/Git_projects/LSDTopoTools_AnalysisDriver/Analysis_driver;export PATH
----

On the university of Edinburgh servers you do this with:
[source,console]
----
$ PATH=$PATH:~/LSDTopoTools/Git_projects/LSDTopoTools_AnalysisDriver/Analysis_driver;export PATH
----

NOTE: The difference between Edinburgh servers (or a native linux installation) and Docker/Vagrant is that *LSDTopoTools* is installed in you home directory on the former and in the root directory in the latter. So for Edinburgh you need a `~` to begin your path and on DockerVagrant you don't.

IMPORTANT: Adding a path in this way is not permanent so you need to do this each time you start a terminal session. If you want it to be permanent look up on the magical internets how to update your bashrc profile. 

==== Run a basic analysis

. We need two terminal windows open. You already have one open, so open another one. I will colour note the terminal ([red]#Terminal 1# or [blue]#Terminal 2#) in each step
. [red]#Terminal 1# In the first terminal do the following:
.. [red]#Terminal 1# In docker or vagrant:
+
[source,console]
----
$ cd /LSDTopoTools/Git_projects/LSDTopoTools_AnalysisDriver/Analysis_driver
----
+
.. [red]#Terminal 1# In native linux or on Edinburgh's servers type:
+
[source,console]
----
$ cd ~/LSDTopoTools/Git_projects/LSDTopoTools_AnalysisDriver/Analysis_driver
----
+
. [red]#Terminal 1# We will explain all this stuff in more detail later, for now just execute the commands.
. [blue]#Terminal 2# Now in the other terminal window type:
.. For vagrant/docker:
+
[source,console]
----
$ cd /LSDTopoTools/Topographic_projects/LSDTT_workshop_data/
----
+
.. For native linux/Edinburgh:
+
[source,console]
----
$ cd ~/LSDTopoTools/Topographic_projects/LSDTT_workshop_data/
----
+
. [blue]#Terminal 2# We want to update the path names. So get the path updater script and run it:
+
[source,console]
----
$ wget https://raw.githubusercontent.com/LSDtopotools/LSDAutomation/master/LSDTTParamfileUpdater.py
$ python LSDTTParamfileUpdater.py
----
+
. [red]#Terminal 1# Okay, now go back to the first terminal window. Type the following:
.. For docker/vagrant
+
[source,console]
----
$ ./LSDTT_BasicMetrics.out /LSDTopoTools/Topographic_projects/LSDTT_workshop_data/ WA_BasicMetrics01.driver
----
+
.. For native Linux/Edinburgh servers
+
[source,console]
----
$ ./LSDTT_BasicMetrics.out ~/LSDTopoTools/Topographic_projects/LSDTT_workshop_data/ WA_BasicMetrics01.driver
----
+
. [red]#Terminal 1# If you had all the directory names correct, you will get some text to screen that ends with a statement about hillshading. In fact all this does is print a hillshade of the raster.
+
. You can look at this raster in http://www.qgis.org/en/site/[QGIS]. We have some link:LSDTT_QGIS.html[instructions for QGIS], if you want to see instructions for link:LSDTT_QGIS.html#_adding_data[adding data click here].
+
. Open QGIS and load the raster. The new raster is in the same directory with your other data and is called `WA_FirstExample_hs.bil`.The data will look like this:
+
.A hillshade of the Whiteadder catchement
image::images/WA_HS.jpg[Whiteadder hillshade]
+
. As you can see, the DEM has quite a few artefacts. There isn't much we can do about that, I'm afraid.
