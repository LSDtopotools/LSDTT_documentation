=== Getting surface metrics

Don't worry, things are going to get easier. We are going to do essentially the same thing we did in the previous section:

* First we make sure directories are correct in the *driver* file. This should have already happened if you have run `LSDTTParamfileUpdater.py`.
* Second, we call `LSDTT_BasicMetrics.out` in the terminal.

. Run the program:

. [red]#Terminal 1# We run the program again, but with a new driver file. Type the following:
.. For docker/vagrant
+
[source,console]
----
$ ./LSDTT_BasicMetrics.out /LSDTopoTools/Topographic_projects/LSDTT_workshop_data/ WA_BasicMetrics02.driver
----
+
.. For native Linux/Edinburgh servers
+
[source,console]
----
$ ./LSDTT_BasicMetrics.out ~/LSDTopoTools/Topographic_projects/LSDTT_workshop_data/ WA_BasicMetrics02.driver
----
+
. This does more stuff. We can look at the *driver file*:
+
[source,paramfile]
----
# Parameters for extracting simple surface metrics
# Comments are preceded by the hash symbol

# These are parameters for the file i/o
# IMPORTANT: You MUST make the write directory: the code will not work if it doesn't exist.
read path: /LSDTopoTools/Topographic_projects/LSDTT_workshop_data/
write path: /LSDTopoTools/Topographic_projects/LSDTT_workshop_data/
read fname: WA
write fname: WA_SecondExample
channel heads fname: NULL

# Parameters for surface metrics
surface_fitting_radius: 11
print_slope: true
print_aspect: true
print_curvature: true
print_tangential_curvature: true
----
+
. In this case the program is printing *slope*, *aspect*, *curvature*, and *tangential curvature* rasters. They have filenames that reflect their contents so have a look. Slope tells you how steep the landscape is, aspect which direction the surface is pointing, curvature how, uh, curvy the landscape is (mathematically it is how quickly slope changes in space) and the tangential curvature is how curvy the landscape is in the direction of steepest descent. Essentially tangential curvature tells you how tightly curved contours are and is useful for finding valleys.
+
. The way these are calculated is by fitting a surface of radius `surface_fitting_radius` to the points in the DEM and then calculating derivatives of that surface.

==== Questions and tasks for surface metrics

* Try changing the `surface_fitting_radius`. What happens?
