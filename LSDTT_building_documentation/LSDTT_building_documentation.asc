
= Building LSDTopoTools documentation
Simon M. Mudd, School of GeoSciences, University of Edinburgh
:doctype:   book
:toc: left
:icons: font
:toclevels: 3
:stem: latexmath
:imagesoutdir: /LSDTopoTools/Git_projects/LSDTopoTools_ChiMudd2014/Documentation/images

:numbered:
:stem: latexmath

== The LSDTopoTools documentation toolchain

Most users will just look at our website. But some users may wish to build the documents themselves.
The documents are built using http://asciidoctor.org[Asciidoctor], which is a https://www.ruby-lang.org/en/[Ruby] documentation engine.

.Just tell me how to build the documentation
*******************************************************
* Step 1: Install the Asciidoctor toolchain.
* Step 2: From the main repostory directory run the python script `compile_LSDTTDocs.py`. 
*******************************************************


== Some notes on installing Ruby for LSDTopoTools.

After a number of painful windows installations, we have decided that life in Linux is much easier.
If you don't have Linux you can make a little Linux machine in your own computer using https://www.virtualbox.org/wiki/Downloads[virtualbox] and https://www.vagrantup.com/[vagrant], or using https://www.docker.com/[Docker]. You can read about setting up one of these Linux machines in the link:LSDTT_installation.html[LSDTopoTools installation instructions].

. We will assume you are using Ubuntu in a Vagrant box or Docker container. If you are not on an Ubuntu system you will need to replace the `apt-get` commands with whatever command work on your operating system (e.g., `yum`). After trying a number of options, we have found that https://rvm.io/[rvm] is the best way to get everything working.

. Open a terminal in your Linux system. If you don't know what that is link:LSDTT_using_linux.html[read our introduction to Linux].

. We need to install some software first:
+
[source,console]
----
$ sudo apt-get install software-properties-common
$ sudo apt-add-repository -y ppa:rael-gc/rvm
$ sudo apt-get update
$ sudo apt-get install rvm
----
+
You will then need to log out of your Linux system and log back in again. rvm will tell you this:
+
[source,console]
----
Creating group 'rvm'

Installing RVM to /usr/share/rvm/
Installation of RVM in /usr/share/rvm/ is almost complete:

  * First you need to add all users that will be using rvm to 'rvm' group,
    and logout - login again, anyone using rvm will be operating with `umask u=rwx,g=rwx,o=rx`.

  * To start using RVM you need to run `source /etc/profile.d/rvm.sh`
    in all your open shell windows, in rare cases you need to reopen all shell windows.
----
+
. In vagrant you can run `vagrant halt` and `vagrant up`; in Docker just shut down and re-start the container. Then do this:
+
[source,console]
----
$ source /etc/profile.d/rvm.sh
----
+
. To see what users are in the group:
+
[source,console]
----
$ getent group rvm
----
+
. To add the vagrant user:
+
[source,console]
----
$ sudo usermod -a -G rvm vagrant
$ getent group rvm
----
+
. In my installation you cannot just start installing stuff, *you need to open a new terminal*. So use either `ssh` (Linux or MacOS) or `putty.exe` (windows) to open a new terminal.
+
. In your new terminal run (*Warning: this takes a long time!*):
+
[source,console]
----
$ rvm install 2.3
----
+
. I wanted to make sure we use this ruby default:
+
[source,console]
----
$ rvm use --default 2.3
----
+
. Then install bundler:
+
[source,console]
----
$ gem install bundler
----
+
. Now I went into a documentation folder and used `bundle install`. The gemfile is:
+
[source,ruby]
----
source 'https://rubygems.org'

gem 'rake'
gem 'asciidoctor'

gem 'json'
gem 'awesome_print'

gem 'asciidoctor-epub3'
gem 'asciidoctor-pdf'

gem 'coderay'
gem 'pygments.rb'
gem 'thread_safe'
gem 'epubcheck'
----
+
. Yay, all the gems are installed!
. The installation of the gem `nokogiri` can be very temperamental, one particular issue on MacOS is that its install clashes with https://github.com/ggreer/the_silver_searcher[`The Silver Searcher`]. To resolve this issue, first run `brew unlink xz` to remove symlinks to `xz`, then re-run `bundle install` and once that completes, reapply the symlinks to `xz`: `brew link xz`.


== Building the html documents in individual folders or all at once. 

. Make sure bundle install works on any of the gemfiles in the subdirectories of the documentation. 

. If you go into any subdirecory, you can now compile _that section_ with:
+
[source,console]
----
$ bundle exec rake book:build_html
----
+
. You can imagine that doing this in every folder is really tedious. We made a python script to compile everything at once. 
. Go into the main documenttion directory. 
. Run:
+
[source,console]
----
$ python compile_LSDTTDocs.py
----
+
. This will put the complete website in the *html_build* folder. 


=== If you want to make pdf files using asciidoctor with equations in them

Forget about doing this in Windows. Follow the instructions above on getting https://rvm.io/[rvm] installed on Linux.

. First, you need to install a bunch of stuff (this works in Ubuntu):
+
[source, console]
----
$ sudo apt-get -qq -y install bison flex libffi-dev libxml2-dev libgdk-pixbuf2.0-dev libcairo2-dev libpango1.0-dev ttf-lyx
----
+
. Now run bundle install with this Gemfile:
+
[source,ruby]
----
source 'https://rubygems.org'

gem 'rake'
gem 'asciidoctor'

gem 'json'
gem 'awesome_print'

gem 'asciidoctor-mathematical'
gem 'asciidoctor-epub3'
gem 'asciidoctor-pdf'

gem 'coderay'
gem 'pygments.rb'
gem 'thread_safe'
gem 'epubcheck'
----
+
. Now, this is annoying. To get the pdf to work, you need to designate an `:imagesoutdir:` but a *relative path will not work*. So you need an absolute path in your root `.asc` file. So, for example, the root `.asc` file should contain the directives:
+
[source,ascii]
----
:stem: latexmath
:imagesoutdir: /LSDTopoTools/Git_projects/LSDTopoTools_ChiMudd2014/Documentation/images
----
+
. *You need to change this line to suit your path!*

== If you are making changes to the documentation

NOTE: You can ignore this unless you are helping write the template and have push permission. Currently this applies to nobody so they are more notes for myself to remember how I set up this repository.

I do not want any messy merging conflicts! To avoid this please keep the *master* and *gh-pages* separate on your computer!

. When checking out the code, check them out into two directories:
+
[source, console]
----
$ git clone https://github.com/LSDtopotools/LSDTT_documentation.git master
$ git clone https://github.com/LSDtopotools/LSDTT_documentation.git gh-pages
----
+
. In the gh-pages directory, check out the gh-pages branch and get rid of the master branch:
+
[source, console]
----
$ cd gh-pages
$ git checkout origin/gh-pages -b gh-pages
$ git branch -d master
----
+
. Now, go back to the master branch, you can make changes there.

. You can use the python script https://github.com/LSDtopotools/LSDTT_documentation/blob/master/compile_LSDTTDocs.py[`compile_LSDTTDocs.py`] to compile all the documentation in the repository. This will create a website in the *html_build* folder. 

. If you want things to appear on the github website, you need to copy the files in the html_build folder (but not the `.git` folder) to the gh-pages directory. 

. Then go to the gh-pages directory and add any new files:
+
[source,console]
----
$ pwd
/some/path/to/LSDTT_documentation/master
$ cd ..
$ cd gh-pages
$ git add *.html
$ cd images
$ git add *.png *.jpg *.gif *.svg
$ cd ..
$ git commit -m "Updating website" .
$ git push origin gh-pages
----
