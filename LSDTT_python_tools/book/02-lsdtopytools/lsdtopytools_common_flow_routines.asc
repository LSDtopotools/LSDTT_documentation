:numbered:

== Drainage Network Extraction

This chapter describes how to calculate common flow routines that are required for most of the analysis. All of the routines calculating flows or river-related metrics require the calculation of flow accumulation, direction, drainage area or the actual position of rivers. +

=== Common Flow Routines

Before locating the actual channel, the software needs to know few information in order to organise the cells and their connections. This is very straightforward: +

[source, python]
----
...
my_dem.CommonFlowRoutines()
----

So far, this is it. It calculates behind the scene a number of node ordering, flow direction, flow accumulation, drainage area. Node ordering is similar to https://doi.org/10.1016/j.geomorph.2012.10.008[Braun and Willett, 2013 (fastscape)]. Drainage area is based on a _D8_ method from https://doi.org/10.1016/S0734-189X(84)80011-0[O'Callaghan and Mark, 1988].

TIP: We are still building the `python` bindings, other methods will be implemented (_e.g.,_ Dinf for drainage area calculations), let us know if you need it soon.

=== Channel Network Extraction

`LSDTopoTools` extracts rivers by detecting the channel head locations and then building the network following flow direction. Several algorithms are available depending on (i) how important sources location is each case; (ii) your dem resolution (https://doi.org/10.5194/esurf-4-627-2016[Grieve et al., 2016 for relevant discussion]); (iii) landscape characteristics. The generic python function is the following: +

[source,python]
----
...
my_dem.ExtractRiverNetwork(method = "name of the method", corresponding_argument_1 = ...)
----

where each methods has several arguments to customise the extraction. +

`method = "area_threshold"` is the most basic one. It is suitable when your DEM resolution is coarser than about 10m (_e.g.,_ SRTM or ASTER) or if source location is not important. Extremely straightforward and efficient, it initiates a channel when a certain number of other cells are draining into a single one. It only has one parameters: +

* area_threshold_min: the number of cells required to initiate a channel.

IMPORTANT: We are implementing the other methods now: DREICHT, Pelletier and a geometric method based on Weiner filtering.

=== Watershed labelling

CAUTION: We are still refining these methods. In few cases they can be buggy and requires to play a bit with the parameters to obtain wanted results.

Some routines, for example river concavity analysis, knickpoint extraction or stem:[k_{sn}] extraction requires watershed labelling to focus on certain drainage networks. It also ensures that the area you are studying is actually complete: you don't want to extract stem:[\chi] with biased drainage area for example. +
The extraction is made through the following function, customisable with several methods:

[source,python]
----
...
my_dem.DefineCatchment(method="name_of_method", param_for_method = ...)
----

The available methods are the following: +

`"min_area_pixels"` extracts all catchments containing more than a certain amount of pixels. Basic but efficient. It can be customise with the following arguments: +

* `test_edges`: If True, will test if te basin is complete or draining into no data. It will also ignore your basin if there is internal no data.
* `min_area_pixels`: The number of pixel to select a watershed.

TIP: Very soon, I will implement other methods. The most efficient method will be selection by coordinates.

=== Visualisation and data I/O

==== Plotting routines:

TIP: TO DO. I will incorporate routines to plot basin outlines, channel network and source location

==== Getting and Saving Data

TIP: Data will be very soon accessible via `pandas` dataframes within `python` (therefore directly savable into `csv` files). I/O operations for saving processing time will be done via `h5py`, a htf5 `python` interface. (htf5 is a very efficient file format for complex storing).


