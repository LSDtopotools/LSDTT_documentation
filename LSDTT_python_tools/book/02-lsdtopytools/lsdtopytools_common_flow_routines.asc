:numbered:

== Basic Manipulations

This chapter describes how to calculate common flow routines that are required for most of the analysis. All of the routines calculating flows or river-related metrics require the calculation of flow accumulation, direction, drainage area or the actual position of rivers. +

=== Common Flow Routines

Before locating the actual channel, the software needs to know few information in order to organise the cells and their connections. This is very straightforward: +

[source, python]
----
...
my_dem.CommonFlowRoutines()
----

So far, this is it. It calculates behind the scene a number of node ordering, flow direction, flow accumulation, drainage area. Node ordering is similar to https://doi.org/10.1016/j.geomorph.2012.10.008[Braun and Willett, 2013 (fastscape)]. Drainage area is based on a _D8_ method from https://doi.org/10.1016/S0734-189X(84)80011-0[O'Callaghan and Mark, 1988].

TIP: We are still building the `python` bindings, other methods will be implemented (_e.g.,_ Dinf for drainage area calculations), let us know if you need it soon.

=== Channel Network Extraction

`LSDTopoTools` extracts rivers by detecting the channel head locations and then building the network following flow direction. Several algorithms are available depending on (i) how important sources location is each case; (ii) your dem resolution (https://doi.org/10.5194/esurf-4-627-2016[Grieve et al., 2016 for relevant discussion]); (iii) landscape characteristics. The generic python function is the following: +

[source,python]
----
...
my_dem.ExtractRiverNetwork(method = "name of the method", corresponding_argument_1 = ...)
----

where each methods has several arguments to customise the extraction. +

`method = "area_threshold"` is the most basic one. It is suitable when your DEM resolution is coarser than about 10m (_e.g.,_ SRTM or ASTER) or if source location is not important. Extremely straightforward and efficient, it initiates a channel when a certain number of other cells are draining into a single one. It only has one parameters: +

* area_threshold_min: the number of cells required to initiate a channel.

IMPORTANT: We are implementing the other methods now: DREICHT, Pelletier and a geometric method based on Weiner filtering.

=== Watershed labeling

CAUTION: We are still refining these methods. In few cases they can be buggy and requires to play a bit with the parameters to obtain wanted results.

Some routines, for example river concavity analysis, knickpoint extraction or stem:[k_{sn}] extraction requires watershed labelling to focus on certain drainage networks. It also ensures that the area you are studying is actually complete: you don't want to extract stem:[\chi] with biased drainage area for example. Watershed labelling in `LSDTopoTools` requires the river network to be extracted first. +
The following method run the watershed labeling, customisable with several methods:

[source,python]
----
...
# add that line to previous code to define the catchments
my_dem.DefineCatchment(method="name_of_method", param_for_method = ...)
----

The available methods are the following: +

`"min_area_pixels"` extracts all catchments containing more than a certain amount of pixels. Basic but efficient. It can be customise with the following arguments: +

* `test_edges`: If True, will test if te basin is complete or draining into no data. It will also ignore your basin if there is internal no data.
* `min_area_pixels`: The number of pixel to select a watershed.

`"from_XY"` extracts catchments by X-Y coordinates of the outlets. From far the most reliable method to get specific basin, but requires manual inputs. It takes the following arguments: +

* `X_coords`: a list of outlet X coordinates. For example `[450524,521002,522035]`. It needs to be (i) in the raster units (probably UTM) and (ii) the same length of the corresponding Y coordinates.
* `Y_coords`: a list of outlet Y coordinates. For example `[6226620,6275620,6226671]`. It needs to be (i) in the raster units (probably UTM) and (ii) the same length of the corresponding X coordinates.
* `coord_search_radius_nodes`: an integer defining the number of node to investigate around the input coordinates and find a river to snap to.
* `coord_threshold_stream_order`: an integer defining the order of stream to aim. 2 or 3 work for most of the cases.

=== Visualisation

`lsdtopytools` contains some quick routines to visualise data. They are less developed than `LSDMappingTools` but are directly integrated to `lsdtopytools`. They allow you to plot the results of the `python` analysis or to preplot base maps and customise it with `matplotlib` or to quickly visualise the outputs.

==== Base map plotting:

The first figure and probably the base of many other is to plot a base map, or simply a topographic map. this can be done with the following function contained into `quickplot` module. The full function and its use is described as follow:

[source,python]
----

def plot_nice_topography(mydem ,figure_width = 4, figure_width_units = "inches", cmap = "gist_earth", hillshade = True,
	alpha_hillshade = 0.45, color_min = None, color_max = None, dpi = 300, output = "save", format_figure = "png", fontsize_ticks =6, fontsize_label = 8,
	hillshade_cmin = 0, hillshade_cmax = 250,colorbar = False,
	fig = None, ax = None, colorbar_label = None, colorbar_ax = None):
	"""
		Plot a nice topographic map. You can adjust the following set of parameters to customise it:
		Arguments:
			mydem: the LSDDEM object. Required.
			figure_width (float): figure width in inches (Default value because of matplotlib...) or centimeters.
			figure_width_units (str): "inches" (Default) or "centimetres"
			cmap (str): the name of the colormap to use, see https://matplotlib.org/examples/color/colormaps_reference.html for list.
			hillshade (bool): Drape an hillshade on the top of the figure
			alpha_hillshade (float): regulate the transparency of the hillshade. Between 0 (transparent) and 1 (opaque).
			color_min (float): min elevation corresponding to the min color on the colormap. None = auto.
			color_max (float): see color_min and replace min by max.
			dpi (int): Figure quality, increase will increase the figure quality and its size ofc.
			output (str): "save" to save figure, "return" to return fig/axis, "show" to show.
			format_figure (str): the extension of the saved bitmap: "png", "jpg", "svg" reccomended. For the rest see: https://matplotlib.org/api/_as_gen/matplotlib.pyplot.savefig.html
			fontsize_ticks (float): the fontsize of the ticks
			fontsize_label (float): font size of the labels
			fig (matplotlib figure): Default None, in certain cases you may want to add teh basemap plot on the top of an existing.
			ax (Matplotlib axis): Default None. if custom Figure passed as argument, you also need to pass an axis
			colorbar_label (str): label of the colorbar if activated.
			colorbar_ax (mpl axis): the axis where to place the colorbar (Default will be auto no worries)
		Returns:
			Depends on parameters
		Authors:
			Boris Gailleton
		Date:
			19/12/2018 - last update 09/03/2019
	"""
----

It allows the user a certain amount of customisations. Note that just using `quickplot.plot_nice_topography(mydem)` where `mydem` is a `LSDDEM`

==== Getting and Saving Data

TIP: Data will be very soon accessible via `pandas` dataframes within `python` (therefore directly savable into `csv` files). I/O operations for saving processing time will be done via `h5py`, a htf5 `python` interface. (htf5 is a very efficient file format for complex storing).


