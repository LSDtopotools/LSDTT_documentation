:numbered:

== Getting started with lsdtopytools

This chapter will explain the basics and general uses of `lsdtopytools`. The best way to learn is to practice: we therefore provide this code documentation for the details about each routines, but also an (hopefully at some point) `example` folder on the github page with practical cases you can just copy and adapt to your needs.


=== Code structure and philosophy

==== Python

`python` is a nice high-level programming language. It is part of the _interpreted_ languages, meaning that each line of code is interpreted one by one by a software (here python), other well-know free examples are `perl`, `R`, `Julia` or the somehow popular not free and not open source `MATLAB`. These languages are useful to take abstraction of complex machine interaction such as memory management and control other more complex underlying code. There is no need to have advanced `python` or coding knowledge to use our tools, `python` is easy to write and read. https://www.codecademy.com/learn/learn-python[Code academy] offers a nice tutorial to get the basis (not mandatory but can be useful). +
To run a custom `python` script: simply navigate to the right directory within your `conda` terminal (see installation instructions) and run `python name_of_my_script.py`. +
If you don't want to learn this useful tool, use the command-line interface.

==== lsdtopytools coding style

`lsdtopytools` is coded in an _object oriented_ logic: we have some precoded routines absed on a common template that you just need to construct with your custom parameters. Basically all our routines are based on an original DEM that you load first. Then each routines depends on others and the code deals internally on how to call these interaction. This sound probably fuzzy so let's illustrate with an example: +
Let's imagine you have a `geotif` DEM of your area and you want to extract channel steepness. You need many information to do so: the code needs to know the flow direction of your DEM cells, it needs to know the drainage area, which pixels is a river and many different bits of data you probably don't have yet. Thanks to the _object orientation_ you just have to call the `ksn` extraction routine and the code will know what it needs to calculate beforehand, tells you what it is defaulting and what you could add to cusomise each steps and finally run the wanted routine.

=== Getting started

WARNING: Your data needs to be in UTM projection to work correctly. Geographic system (e.g., WGS84) are not in metres, therefore the metrics are not straightforward to understand.

==== Load your data into the system

The first step of each routines is to load the base raster: your dem from which the metrics will be calculated. You simply need to import the code (as any `python` code) and load the dem as follow: +

[source,python]
----
from lsdtopytools import LSDDEM # LSDEM is the object template abovementioned

my_dem = LSDDEM(file_name = "name+of_my_dem.tif")
----
+
THis is the simplest way to load a dem. It however implies that your dem is in the same folder than your `python` script. You can load a de with the following options: +

, path = "./", file_name = "test.tif", already_preprocessed = False, verbose = True)

* *path*: the path to your file. On windows it can be `"C:\Users\s1675537\Desktop\"`, on linux `"/home/s1675537/Data/"`. If you don't give this option, the default value is `"./"`: it means current folder.
* *file_name*: the file name with the extension. `lsdtopytools` relies on `rasterio` and `gdal` to load raster. It can (theoretically) understand https://www.gdal.org/formats_list.html[these] formats. The most common are working (_e.g.,_ `.tif`, `.bil` or ASCII grids).
*  *already_preprocessed* (boolean): `False` if your DEM needs preprocessing (see <<Raster preprocessing>>) and `True` if already preprocessed externally.
*  *verbose* (boolean): The code can talk: it details what it is doing and tells you where there are some important warnings. Activated by default, you can turn it off with `verbose = False` if you want less outputs.

+
We are basically done with the initialisation, all the different metrics generated from DEM require this line of code at the beginning of a script. The next parts will describe the different routines.

==== Running a routine: general case

Before explaining each routines, all of them are build following the same pattern around the `LSDDEM` object. You call the routine ON the object the following way: +

[source,python]
----
...

my_dem.routine_name(routine_param1 = 54, routine_param2 = "auto")
----
+

It either process and store internally new result, return a dataset to you or generate a figure depending on the routine called. In a single script, if a routine has already been ran, the results are usually stored internally.

==== Save and load

Not available yet. But some routines can take a certain amount of time to run (even in `c++`), I am therefore implementing a save-load system based on `h5py` package. The aim is to load and save only what you need behind the scene to save memory and processing time. It will take a wee time to do properly, please bear with me. An easy solution would be to use `pickle`, but by experience it crashes and uses a LOT of memory when dealing with large dataset (e.g, a raster).


=== Raster preprocessing

==== Principle

Most of the routines uses flow information to generates metrics, the most striking example being river extraction: the program obviously needs to know where the water will flow to calculate rivers. Preprocessing in our case means _making sure that all our cells are draining to another one or to an edge_. This is essential as DEM are inherantly noisy: this noise will produce artificial pits and depressions. Although minor in the digital topography, these will be fatal to a program as the program will end any flow into these pit therefore biasing drainage area, flow direction, basin outlet or many other routines. +
The solution is to *carve* (sometimes refered as breaching) or to fill these depressions. Respectively, it either "_dig_" a way out of the depression to the nearest outreach or fill the depression until water can (numerically, there no real water involved) drain to another cell. Carving usually modify less cells than filling but is more computationnaly expensive, and filling is usually required after carving to ensure minimum slope on flat surfaces. +

==== Use in lsdtopytools

In the program, you can either feed the code with a dem externaly preprocessed, see <<Load your data into the system>>, or use one of our filing and carving algorithm:

[source,python]
----
...

my_dem.PreProcessing(filling = True, carving = True, minimum_slope_for_filling = 0.0001)

----

It preprocesses your base raster and save it into the associated `LSDDEM` object. The options are the following: +

* carving (boolean): Enables the carving algorithm: Lindsay (2016), DOI: 10.1002/hyp.10648.
* filling (boolean): Enables the filling algorithm: Wang and Liu (2006), DOI: https://doi.org/10.1080/13658810500433453.
* minimum_slope_for_filling: imposes a minimum slope while filling. Keep it low to avoid over filling flat areas.

+

After being preprocessed, the raster is ready to generate flow metrics.

==== Plotting and preprocessing caveats

This guide does not aim to discuss the filling and carving algorithm performances, relevant literature does that. So short story long, one might want to check the preprocessing result because (i) filling can generate "_overfilled_" areas, where for example a bridge or a dam creates an artificial obstacle; (ii) carving and filling alters the original data and therefore can generate unwanted artifact that one need to be aware to avoid misinterpretations. +

===== Topographic map

We provide some plotting routines to plot the topography and preprocessing results. The first routine generates a nice, publication-ready topographic map. It calculates an hillshade of your topography (simulation of natural light to enhance relief) and drape it on a topographic map, any metrics you want to plot need to be calculated beforehand. +

NOTE: Our plotting routines depend on other sub-modules that you need to import first: `from lsdtopytools import quickplot` will do the trick for this one.

[source,python]
----
...

from lsdtopytools import quickplot

quickplot.plot_nice_topography(my_dem, figure_width = 4, figure_width_units = "inches", cmap = "gist_earth", hillshade = True,  alpha_hillshade = 0.45, color_min = None, color_max = None, dpi = 300, output = "save", format_figure = "png")
----
+

`quickplot.plot_nice_topography(my_dem)` would work with default parameters, but the following customisations are available:

* `figure_width`: the real width of the final figure. A matplotlib figure contains the plot, its axis, labels, padding, etc.
* `figure_width_units`: Can be `inches`, which unfortunately is the default in matplotlib or "centimetre", a real unit.
* `cmap`: the name of the colormap to use. For example `"jet"` or our default `"gist_earth"`. Exhaustive list https://matplotlib.org/examples/color/colormaps_reference.html[on `matplotlib`'s website].
* `hillshade`: `True` by default, you can switch it to `False` to disable the transparent hillshade draped on top of the topography.
* `alpha_hillshade`: Transparency of the hillshade: 0 is fully transparent and 1 fully opaque (would hide the toography).
* `color_min`: minimum elevation that will correspond to the minimum color on the colormap. For example if my landscape ranges from 50 to 2000 and if I set this value to 500, all value between 50 and 500 will have the same color. If you don't customise it, it will be the minimum value.
* `color_max`: same principle with the maximum color. If you don't customise it, it will be the maximum value.
* `dpi`: quality of the bitmap if saved. `300` is an acceptable quality, `900` would be really fine, for a large poster for example. Increasing the dpi obviously increases the size of the file.
* `output`: Can be `"save"` to save a figure in the same folder than the raster you loaded; `"show"` triggers `plt.show()` and `"return"` which returns `fig,ax` if you need to customise your figure in `python` using `matplotlib`.
* `format_figure`: If `output` is `"save"`, you can use `"png"` (good quality, medium size), `"svg"` (vector image, can be edited with illustrator (Proprietary), coreldraw (proprietary) or inkscape (free and open-source)) or any other `maplotlib`-supported format (It can depend on extra dependencies, see https://matplotlib.org/api/_as_gen/matplotlib.pyplot.savefig.html[this help page from `matplotlib` documentation]).

+
It will produce the following result: +

.Example topographic plot. Script available in the example folder on the github repository (TODO: Add link to the public repo)
image::images/example_topo.png[, 1000, 600, align='center']

===== Preprocessing check

We also provide a quick plotting routine to check the preprocessing results and if any artifact has appeared. Use it as follow. +

[source,python]
----
...
quickplot.plot_preprocessing_diff(my_dem)
----
// the function:
// plot_preprocessing_diff(mydem ,figure_width = 4, figure_width_units = "inches", cmap = "RdBu_r", this_fontsize = 6,
// 	color_min = None, color_max = None, dpi = 300, output = "save", format_figure = "png", n_dec_lab = 5)

The following customisations are available: +

* `figure_width`: the real width of the final figure. A matplotlib figure contains the plot, its axis, labels, padding, etc.
* `figure_width_units`: Can be `inches`, which unfortunately is the default in matplotlib or "centimetre", a real unit.
* `cmap`: the name of the colormap to use. For example `"jet"` or our default `"gist_earth"`. Exhaustive list https://matplotlib.org/examples/color/colormaps_reference.html[on `matplotlib`'s website].
* `color_min`: minimum elevation that will correspond to the minimum color on the colormap. For example if my landscape ranges from 50 to 2000 and if I set this value to 500, all value between 50 and 500 will have the same color. If you don't customise it, it will be the minimum value.
* `color_max`: same principle with the maximum color. If you don't customise it, it will be the maximum value.
* `dpi`: quality of the bitmap if saved. `300` is an acceptable quality, `900` would be really fine, for a large poster for example. Increasing the dpi obviously increases the size of the file.
* `output`: Can be `"save"` to save a figure in the same folder than the raster you loaded; `"show"` triggers `plt.show()` and `"return"` which returns `fig,ax` if you need to customise your figure in `python` using `matplotlib`.
* `format_figure`: If `output` is `"save"`, you can use `"png"` (good quality, medium size), `"svg"` (vector image, can be edited with illustrator (Proprietary), coreldraw (proprietary) or inkscape (free and open-source)) or any other `maplotlib`-supported format (It can depend on extra dependencies, see https://matplotlib.org/api/_as_gen/matplotlib.pyplot.savefig.html[this help page from `matplotlib` documentation]).
* `n_dec_lab` (int): precision of the colorbar tick labels.

It will produce the following results: an example with only filling and another one with carving and filling. Note that filling affect the raw data a bit more. A lot of changes happen only on few pixels and are hard to distinct. The significantly filled area correspond to a dam. +

.Result after filling.
image::images/example_PP_delta.png[, 1000, 600, align='center']

.Result after carving and fillings.
image::images/example_PP_both.png[, 1000, 600, align='center']
