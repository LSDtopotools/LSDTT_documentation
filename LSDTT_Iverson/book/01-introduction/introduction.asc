:numbered:

== Forewords

This documentation is part of a deliverable for the project GSTP project in the WP 4. This document briefly describe the purpose of this model, and detail how to install, run a single simulation and run a monte-carlo analysis to constrain the model. It also details the outputs in order to explore the data.

== Introduction

WP 4 aims to evaluate the performance of using remote sensing data to detect and anticipate landslide activity. Simulating and anticipating slope failure can be a delicate operation. A common approach consists in modelling background pore pressure to generate static safety maps determining area of risks, Iverson (2000) suggested a transient pore pressure modelling approach to consider the time-evolution of the effect of precipitation and soil water content on slope stability. Such a model is highly case-dependent and requires a significant amount of expensive and time-consuming in-situ monitoring of soil hydrolic, mechanic and hydrogeologic features. The aim of this code and WP is to use an already-monitored site to apply Iverson (2000) model and compare the performance of the model constrained with in-situ data with the model constrained with remote-sensing derived data. The following documentation proposes a protocol to run the model from the different set of data and how to visualise and explore the outputs. The core of the modelling code is written in C++ to ensure reasonable performances and most of the automation for multiple simulations and I/O management is written in `python`.

=== Parameters

A number of parameters are required to manually enter in the model:

* The model categorically needs precipitation data input to simulate the transient pore pressure evolution in the modeled soil column. This data has to be formated as _precipitation intensity_ in length unit per time unit, preferably in seconds.
* Hydraulic parameters from the modelled soil: the hydraulic diffusivity (_D0_), the Hydraulic conductivity (_Ksat_), the steady-state infiltration rates (_Iz/Kz_).
* The depth of the water table and of the substrate.
* The mechanical soil properties, soil cohesion (soil capacity to resist to motion), friction angle, weight of soil and weight of water.
* The landscape property: topographic slope.
* The model resolution.

=== Global approach

For a specific site, neither remote-sensed nor in-situ data would constrain discrete values for each parameters. It is therefore proposed to run the model using a Monte Carlo sampling schemes on range of possible parameters. In the case of testing the model against in-situ data, ranges of parameters are determined by the different mechanical and hydraulic tests. Calibration is achieved with field observation of ground motions. In the case of testing the model against remote-sensed constraints, the ranges of parameters are suggested from general ranges in the literature and calibrating failures are recorded from InSAR data recording time of ground motion.

=== Model output

The main applicable output of the model is a factor of safety for a soil columns that determines when the slope is subjected to fail. This factor of safety is an absolute value defined by equation 18 in Iverson (2000). It suggests failure when such an ouput is `<= 1`. This factor of safety is calculated for a given time and depth of the modelled soil column in regard to the precipitations time series inputted.

==== For a single simulation

The models outputs table-like `csv` files allowing the visualisation of time series the factor of safety or the pore pressure for a single simulations. It also allow the generation of safety maps for a given time and a given Digital Elevation Model to identify the area at risk.

==== For Monte-Carlo Runs

The `python` tools control the Monte-Carlo runs of the simulations. Because of the significant number of run involved by the process, all the `csv` outputs are concatenated into a `hdf5`, easily readable from `python`. Time series of factor of safety for all the simulations can be synthesised into a distribution of detected landslide in time. These can be correlated with calibration data (e.g. observed or measured ground motion from InSAR or in-situ monitoring) to determine "successful" simulations. Once "successful" runs have been defined, visualisation of the parameter sets that leaded to failure detection can be used to constrain the model.


