:numbered:

== Foreword

This document describes both installation and running of a slope stability model developed for combining remote sensing and rainfall data. It also explains the outputs that can be used to explore model results.

== Introduction

WP 4 aims to evaluate the performance of using remote sensing data to detect and anticipate landslide activity. Simulating slope failure involves a very high degree of uncertainty. A common approach consists in modelling steady state pore pressure in response to a threshold rainfall event to generate static safety maps. An alternative approach is to simulate the transient pore pressure to consider the time-evolution of the effect of precipitation and soil water content on slope stability. Such a model is highly case-dependent and requires a significant amount of expensive and time-consuming in-situ monitoring of soil hydraulic, mechanical and hydrogeologic features. The aim of this code is to use an already-monitored site to apply the Iverson (2000) model and compare the performance of the model constrained with in-situ data with the model constrained with remote-sensing derived data. The following documentation proposes a protocol to run the model from the different data sets and how to visualise and explore the outputs. The core of the modelling code is written in pass:[C++] to ensure computational efficiency. The automation for multiple simulations and I/O management is written in `python`.

=== Parameters

A number of parameters are required by model:

* The model needs precipitation data input to simulate the transient pore pressure evolution in the modeled soil column. This data has to be formated as _precipitation intensity_ in length unit per time unit, preferably in seconds.
* Hydraulic parameters from the modelled soil: the hydraulic diffusivity (_D0_), the Hydraulic conductivity (_Ksat_), the steady-state infiltration rates (_Iz/Kz_).
* The depth of the water table and of the substrate.
* The mechanical soil properties, soil cohesion (soil capacity to resist to motion), friction angle, weight of soil and weight of water.
* The landscape property: topographic slope.
* The model resolution.

=== Global approach

For a specific site, neither remote-sensed nor in-situ data would constrain discrete values for each parameters. We therefore run the model using a Monte Carlo sampling schemes on range of possible parameters. In the case of testing the model against in-situ data, ranges of parameters are determined by different mechanical and hydraulic tests. Calibration is achieved with field observation of ground motion. In the case of testing the model against remote-sensed constraints, the ranges of parameters are suggested from general ranges in the literature and calibrating failures are recorded from InSAR data that detect ground motion.

=== Model output

The main applicable output of the model is a factor of safety (FS) for a soil columns that determines when the slope is subjected to fail. This factor of safety is an absolute value defined by equation 18 in Iverson (2000). It suggests failure when the FS is `<= 1`. This factor of safety is calculated for a given time and depth of the modelled soil column, driven by a rainfall time series.

==== For a single simulation

The models outputs table-like `csv` files which include the factor of safety and the pore pressure as a time series.  It also can output factor of safety maps for a given time and a given Digital Elevation Model (DEM) to identify the area at risk.

==== For Monte-Carlo Runs

The `python` tools control the Monte-Carlo runs of the simulations. Because of the significant number of runs involved, all the `csv` outputs are concatenated into a `hdf5` data file, which is easily readable from `python`. Time series of factor of safety for all the simulations can be synthesised into a distribution of detected landslide in time. These can be correlated with calibration data (e.g. observed or measured ground motion from InSAR or in-situ monitoring) to determine "successful" simulations. Once "successful" runs have been defined, visualisation of the parameter sets that leaded to failure detection can be used to constrain the model.


