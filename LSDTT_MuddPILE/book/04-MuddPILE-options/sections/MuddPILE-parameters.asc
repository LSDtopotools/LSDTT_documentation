=== The parameter file

The parameter file has keywords followed by a value. Like this:

[source,paramfile]
---
a_boolean_key: true
a_string_key: super
an_integer_key: 42
a_float_key: 3.1415
----

We list all the possible keys below. All keys have a default value so if you forget to add a key *MuddPILE* will still run using default values. We have adopted the convention of giving these parameter files the extension `.driver`.

NOTE: The parameter file has a specific format, but the filename can be anything you want. We tend to use the extensions `.param` and `.driver` for these files, but you could use the extension `.MyDogSpot` if that tickled your fancy.

The parameter file has keywords followed by the `:` character. After that there is a space and the value. *There must be a `:` followed by a space or the key will not be read!` 

.*MuddPILE* parameter file format
************************************************
. Lines beginning with `#` are comments.
. Keywords or phrases are followed by a colon (`:`).
. The order of the keywords do not matter.
. Keywords are not sensitive, but must match expected keywords.
. If a keyword is not found, a default value is assigned.
************************************************


=== Parameter file options

Below are options for the parameter files. 


==== Basic file input and output

[cols="1,1,2", options="header"]
.File input and output options. **These do not have defaults and MUST be declared**.
|====
|Keyword
|Input type
|Description

|write path
|string
|The path to which data is written. **The code will NOT create a path: you need to make the write path before you start running the program.**

|read path
|string
|The path from which data is read.

|write fname
|string
|The prefix of rasters to be written *without extension*.
For example if this is `Test` and you have selected `bil` format then a fill operation will result in a file called `Test_Fill.bil`.

|read fname
|string
|The filename of the raster to be read without extension. For example if the raster is `MyRaster.bil`, read fname will be `MyRaster`. *In MuddPILE rasters are only read if the `read_initial_raster` key is test to `true`.* 

|====

=== Important default settings that you cannot change

Our boundary conditions are theoretically flexible if you dig into the pass:[c++] code but in the *MuddPILEdriver* you can only have fixed elevation North and South boundaries and a periodic E-W boundary. A periodic boundary is one where the boundary wraps to the opposite side (i.e., in our models the computer thinks the East side of the domain is right next to the West side).

If you don't read a raster, the model prints rasters in _MuddPILE Atlantis_, a mythical kingdom that is located in the Pacific Ocean. Basically we set the UTM zone to 1 and have the corner at 0 easting and 0 northing, i.e. on the equator. 

==== Parameters for initiating the model domain

[cols="1,1,1,2", options="header"]
.Parameters for initiating the model domain. These are used if `read_initial_raster: false`, which is the default.
|====
|Keyword
|Input type
|Default value
|Description


|NRows
|int
|0
|Number of rows in the model. 

|NCols
|int
|0
|Number of columns in the model. 

|DataResolution
|float
|0
|The size of the pixels in the model. 

|minimum_elevation
|float
|0
|If you have the `remove_seas` keyword set to true, the program will change any elevation node below this value to NoData.

|====



[cols="1,1,1,2", options="header"]
.Parameters if you load a raster from file. To do this, set `read_initial_raster: true`.
|====
|Keyword
|Input type
|Default value
|Description

|read_initial_raster
|bool
|false
|If true, reads an initial raster from file. The initial raster's directory and filename are determined by `read path` and `read fname`.

|minimum_elevation
|float
|0
|If you have the `remove_seas` keyword set to true, the program will change any elevation node below this value to NoData. 

|maximum_elevation
|float
|30000
|If you have the `remove_seas` keyword set to true, the program will change any elevation node above this value to NoData.

|remove_seas
|bool
|false
|If true, this changes extreme value in the elevation to NoData. This is quite useful when getting data from the internet because often the No Data values don't register. 

|min_slope_for_fill
|float
|0.001
|The minimum slope between pixels for use in the fill function. 

|print_raster_without_seas
|bool
|false
|If true, this overwrites the original raster with the new NoData values. 
|====


==== Parameters for flux laws, and uplift, and timestepping

[cols="1,1,1,2", options="header"]
.Parameters for flux laws and uplift
|====
|Keyword
|Input type
|Default value
|Description

|m
|float
|0.5
|The area exponent in the stream power law.


|n
|float
|1
|The slope exponent in the stream power law. If n does not equal 1, the numerics of the model are much more complicated (_n_ = 1 can be solved by direct solution of the equations governing fluvial incision whereas other values require Nweton-Raphson iteration to a solution). If you use _n_ for a value other than one we suggest using the adaptive timestepping routines. 

|A_0
|float
|1
|A reference drainage area for chi calculations. 

|background_K
|float
|0.0005
|The background _K_ parameter.

|D
|float
|0.002
|The hillslope sediment transport coefficient (m^2^ / yr)

|S_c
|float
|1.0
|The critical slope in the hillslope flux law. Dimensionless. 

|write_hillshade
|bool
|false
|If true, prints a hillshade raster alongside an elevation raster.

|uplift_mode
|bool
|0
|This is a switch that allows users to choose different modes of uplift. 0 denotes block uplift. 

|dt
|float
|250
|The timestep. Note that if you use hillslope diffusion this should be much lower. The model does not calculate any stability criterion. If you use _n_ not equal to one we suggest using adaptive timestepping (see options below).

|====



==== Parameters for controlling simple model output

[cols="1,1,1,2", options="header"]
.Simple model output
|====
|Keyword
|Input type
|Default value
|Description

|print_interval
|int
|10
|For most types of runs, the model will print rasters every `print_interval` timesteps. This is overridden if you `use_adaptive_timestep: true`. Then the print intervals will be based on model time. 

|write_hillshade
|bool
|false
|If true, prints a hillshade raster alongside an elevation raster.

|====


==== Parameters for creating an initial surface

We have a number of routines to modify the initial surface. They are applied in order and superimposed on each other. Diamond square surfaces are first, then parabolic surfaces, then roughening, then surface diffusion.

[cols="1,1,1,2", options="header"]
.Parameters for controlling the diamond square surface
|====
|Keyword
|Input type
|Default value
|Description
  
|use_diamond_square_initial
|bool
|true
|If true, uses the diamond square algorithm to create a fractal-like surface that is used as the starting condition. This is useful if you want to get complex, branching channel networks. 

|diamond_square_relief
|float
|16
|The total relief, in metres, of the surface generated by the diamond square algorithm. 

|diamond_square_feature_order
|int
|8
|This sets the size of the largest repeating features in the diamond square surface. It goes as the power of two, so if the feature order is 4, then the largest repeating feature will be 16 pixels wide.

|taper_edges
|bool
|true
|If true, this takes the original diamond square surface and tapers the edges to zero elevation using a linear scaling. 

|taper_rows
|int
|10
|The number of rows to taper along the edge of the DEM. Only has an effect if `taper_edges` is true.

|====

[cols="1,1,1,2", options="header"]
.Parameters for controlling the parabolic surface
|====
|Keyword
|Input type
|Default value
|Description
  
|superimpose_parabola
|bool
|true
|If true, a parabola in the N-S direction is imposed, with a peak in the middle of the DEM. The higher the relief of this parabola compared to the relief of the diamond square surface, the more linear your initial basins will be. 

|parabola_relief
|float
|6
|Relief of the superimposed parabolic surface in metres. 

|====

[cols="1,1,1,2", options="header"]
.Parameters for controlling roughening and diffusing the surface
|====
|Keyword
|Input type
|Default value
|Description
  
|roughen_surface
|bool
|true
|If true, roughen the surface with random noise. 

|fill_then_roughen_surface
|bool
|true
|If true, roughen the surface with random noise after filling. In many cases the diamond square algorithm leads to basins in the middle of the initial DEM, which are then filled. The surface roughening ensures that subsequent channels in these basins are not all straight. 

|roughness_relief
|float
|0.26
|The amplitude of the roughness elements in metres. These are randomly selected from a uniform distribution and added to the elevation raster at each pixel.

|diffuse_initial_surface
|bool
|false
|If true, run a simple diffusion algorithm to smooth out any sharp discontinuities. This is useful if you have a high relief initial surface and use nonlinear hillslope diffusion immediately. It "diffuses" by simply taking a weighted mean of the pixel in question (0.5 weighting) and the 4 nearest neighbors (0.5/4 weighting).

|diffuse_steps
|int
|5
|Numer of diffusion steps. Higher numbers mean a smoother landscape.

|====

[cols="1,1,1,2", options="header"]
.Parameter for printing the initial surface
|====
|Keyword
|Input type
|Default value
|Description

|print_initial_surface
|bool
|true
|If true, prints the initial surface. The initial raster is given an integer key of `9999` that appears in the filename. 

|====

==== Parameters for spinning up the surface

The initial surface has no incision or fluvial network. You need to spin up the model. If you ran to steady state just by setting an initial surface and running at the desired uplift rates it would take a rather long time for the model to reach steady state. So we have designed a number of ways to speed up this process. There are many flags for controlling different kinds of spinup routines, but after much experimentation we have inserted a switch called *diamond_square_spinup* that sets all the parameters for you necessary to generate an initial surface we think is (qualitatively) good.

[cols="1,1,1,2", options="header"]
.The spinup parameter to control all spinup parameters
|====
|Keyword
|Input type
|Default value
|Description

|diamond_square_spinup
|bool
|true
|If true, spins up by initiating a diamond square surface, adding a roughened parabola, and then cycling through som high erosion rates with very rapid fluvial incision (at high values of K) to get a nice pretty spun up surface in the least amount of time. This combination of steps is the result of us playing with parameters over 3 weeks of simulations trying to get the "nicest" surfaces. It turns other parameters off (`cyclic_spinup: false`, `spinup: false`). It then makes a diamond square initial surface, tapers the edges, makes a parabolic surface, roughens the surface, dissects the landscape at a high _K_ (0.001) and _U_ (0.5 mm/yr) value for 200 iterations. 

|====


[cols="1,1,1,2", options="header"]
.The spinup parameter to control all spinup parameters
|====
|Keyword
|Input type
|Default value
|Description

|diamond_square_spinup
|bool
|true
|If true, spins up by initiating a diamond square surface, adding a roughened parabola, and then cycling through som high erosion rates with very rapid fluvial incision (at high values of _K_) to get a nice pretty spun up surface in the least amount of time. This combination of steps is the result of us playing with parameters over 3 weeks of simulations trying to get the "nicest" surfaces. 

|====

[cols="1,1,1,2", options="header"]
.Rudimentary spinup parameters
|====
|Keyword
|Input type
|Default value
|Description

|spinup
|bool
|false
|This is the simplest version of the spinup; it simply runs the model at a constant uplift, and the user is expected to use parameters that will best develop the surface. In general this means setting a rapid uplift rate and a high value of _K_. 

|spinup_K
|float
|0.001
|The fluvial erodibility, _K_, of the spinup period. If you want rapid dissection set this to a high number (i.e., greater than or equal to 0.001).

|spinup_U
|float
|0.001
|The uplift rate, in m/yr of the spinup period. The higher this is, the faster you can incise your way through initial topography.  

|spinup_dt
|float
|250
|The timestep, in years, of the spinup period.  

|spinup_time
|float
|20000
|The time you want the model to spin up.  

|staged_spinup
|bool
|false
|If true, the model spins up for the allocated time and then reduces the uplift and _K_ value and spends another period at this less active landscape. Used to make the landscape a little more stable when the normal simulation time starts.   

|====


[cols="1,1,1,2", options="header"]
.Cyclic spinup parameters. We find dissection goes faster if you cycle between uplift rates and _K_ values. 
|====
|Keyword
|Input type
|Default value
|Description

|cyclic_spinup
|bool
|false
|If true, the spinup alternates between two uplift rates and/or _K_ values. This seems to accelerate dissection. 

|spinup_cycles
|int
|5
|Number of spinup cycles. Each cycle has one period of the high _U_ and _K_ values and one period of the low values. 

|cycle_K
|bool
|true
|If true, the _K_ value is alternated in each cycle. If false, _K_ does not vary.  

|cycle_U
|bool
|true
|If true, the _U_ value is alternated in each cycle. If false, _U_ does not vary.  

|cycle_K_factor
|float
|2
|By how large of a factor you want to vary _K_ in each cyclic period. The baseline _K_ is set by `spinup_K`.

|cycle_U_factor
|float
|2
|By how large of a factor you want to vary _U_ in each cyclic period. The baseline _U_ is set by `spinup_U`.

|====

[cols="1,1,1,2", options="header"]
.Options for "snapping" to steady state. This calculates the chi coordinate and then creates a steady state fluvial surface using equation 4 from http://onlinelibrary.wiley.com/doi/10.1002/2013JF002981/full[Mudd et al 2014 JGR-ES].
|====
|Keyword
|Input type
|Default value
|Description

|snap_to_steady
|bool
|false
|If true, the elevations in the landscape will be snapped to steady state elevations using equation 4 from http://onlinelibrary.wiley.com/doi/10.1002/2013JF002981/full[Mudd et al 2014 JGR-ES]. **Warning! If the landscape is not fully dissected you will get big discontinuities in elevation since the chi field is not mature. 

|snapped_to_steady_uplift
|float
|0.0001
|The uplift rate of the steady state landscape that gets "snapped".

|snapped_to_steady_relief
|float
|400
|The outlets of the network are considered to be at 0 elevation, and the _K_ parameter is calculated such that the highest elevation in the snapped landscape is equal to this value. 

|print_snapped_to_steady_frame
|bool
|false
|If true, the raster of the snapped surface is printed to file.  

|====

[cols="1,1,1,2", options="header"]
.Options for forcing dissection
|====
|Keyword
|Input type
|Default value
|Description

|force_dissection
|bool
|false
|This runs a fluvial only incision with a rapid uplift rate (1 cm/yr)  and high _K_ value (0.001), with an _n_ value of 1 and _dt_ of 100 years. It is used to ensure the landscape is totally dissected before the normal forcing conditions are applied. There is no hillslope processes during the dissection. 

|force_dissect_steps
|int
|10000
|The number of timesteps in the forced dissection process. 

|====



==== Parameters for running the model using various climate and tectonic scenarios

Once the model has been "spun up" (where we try to fully dissect the landscape and sometimes bring it to a steady condition based on parameters above) we then run it for some time using various tectonic (by varying uplift in time and space) and "climate" (by varying _K_ and _D_ in time and space) scenarios. These parameters conrtol these forcings


IMPORTANT: Virtually all spinup routines use only fluvial erosion. You can include hillslopes in the "normal" running of the model after spinup. 


[cols="1,1,1,2", options="header"]
.To turn *hillslopes on*
|====
|Keyword
|Input type
|Default value
|Description

|hillslopes_on
|bool
|false
|This turns on the hillslopes. At the moment we only use nonlinear diffusion-like sediment transport. 


|====


[cols="1,1,1,2", options="header"]
.Options for rudimentary steady forcing
|====
|Keyword
|Input type
|Default value
|Description

|rudimentary_steady_forcing
|bool
|false
|This just runs the model with a constant uplift rate for a fixed amount of time. The simplest possible forcing. Note that you can set _m_ and _n_ parameters with those keywords. 

|rudimentary_steady_forcing_time
|float
|100000
|The duration of the rudimentary forcing.

|rudimentary_steady_forcing_uplift
|float
|0.0005
|The uplift rate (m/yr) of the rudimentary forcing. 

|rudimentary_steady_forcing_K
|float
|0.0005
|The _K_ parameter of the rudimentary steady forcing. 

|====



[cols="1,1,1,2", options="header"]
.Options for cyclic forcing (where _U_ or _K_ varies through cycles)
|====
|Keyword
|Input type
|Default value
|Description

|run_cyclic_forcing
|bool
|false
|If true turns on cyclic forcing. Works just like `cyclic_spinup`. Uses some parameters from that spinup routine: `cycle_K`, `cycle_U`, `cycle_K_factor`, `cycle_U_factor`.

|cyclic_forcing_time
|float
|100000
|The duration *of one half of each cycle* of the cyclic forcing. That is, the time in each cycle that is run at the `baseline_K_for_cyclic` and `baseline_U_for_cyclic`.

|baseline_U_for_cyclic
|float
|0.0005
The _U_ parameter of the cyclic forcing; it is then multiplied by  `cycle_K_factor` for the second half of each cycle. 

|baseline_K_for_cyclic
|float
|0.0001
|The _K_ parameter of the cyclic forcing; it is then multiplied by  `cycle_K_factor` for the second half of each cycle. 

|cyclic_cycles
|int
|3
|Number of cycles to run. The total time will be 2*`cyclic_forcing_time`*`cyclic_cycles`.

|cyclic_dt
|float
|250
|The timestep (in yrs) during the cyclic forcing. 

|====


[cols="1,1,1,2", options="header"]
.Options for random forcing (where _U_ varies randomly)
|====
|Keyword
|Input type
|Default value
|Description

|run_random_forcing
|bool
|false
|If true turns on random forcing. The uplift rate is varied such that it runs for a random amount of time (see parameters below) at a random rate (see parameters below).

|maximum_time_for_random_cycle
|float
|20000
|The duration of each random uplift rate is uniformly distributed between `maximum_time_for_random_cycle` and `minimum_time_for_random_cycle`.

|minimum_time_for_random_cycle
|float
|5000
|The duration of each random uplift rate is uniformly distributed between `maximum_time_for_random_cycle` and `minimum_time_for_random_cycle`.

|maximum_U_for_random_cycle
|float
|0.001
|Random uplift rate is uniformly distributed between `maximum_U_for_random_cycle` and `minimum_U_for_random_cycle`.
`

|minimum_U_for_random_cycle
|float
|0.0001
|Random uplift rate is uniformly distributed between `maximum_U_for_random_cycle` and `minimum_U_for_random_cycle`.


|baseline_K_for_cyclic
|float
|0.0001
|The _K_ parameter of the cyclic forcing; it is then multiplied by  `cycle_K_factor` for the second half of each cycle. 

|random_cycles
|int
|4
|Number of random _U_ rates to run. 

|random_dt
|float
|10
|The timestep (in yrs) during the random forcing. 

|====


[cols="1,1,1,2", options="header"]
.Parameters for controlling spatially varying _K_ and _U_.
|====
|Keyword
|Input type
|Default value
|Description

|make_spatially_varying_K
|bool
|false
|If true makes a spatially varying _K_ raster

|spatially_varying_max_K
|float
|0.0001
|The maximum value of _K_ in the _K_ raster.

|spatially_varying_min_K
|float
|0.000001
|The minimum value of _K_ in the _K_ raster.

|min_blob_size
|int
|50
|The minimum size (in pixels) of the _K_ "blobs": these are really squares with edge length between `min_blob_size` and `max_blob_size`.

|max_blob_size
|int
|100
|The maximum size (in pixels) of the _K_ "blobs": these are really squares with edge length between `min_blob_size` and `max_blob_size`.

|n_blobs
|int
|10
|The number of "blobs" of _K_ that differs from the baseline _K_ (which is set by `spatially_varying_min_K`)

|====


[cols="1,1,1,2", options="header"]
.Parameters for runs involving spatial variation in _K_ and _U_
|====
|Keyword
|Input type
|Default value
|Description

|spatially_varying_forcing
|bool
|false
|If true uses spatially varying rasters of _U_ and/or _K_ to drive the model.

|spatially_varying_K
|bool
|false
|If true _K_ will vary in space.

|spatially_varying_U
|bool
|false
|If true _U_ will vary in space.

|calculate_K_from_relief
|bool
|false
|If true this will us the `fixed_relief` parameter to set _K_. 

|spatial_K_method
|int
|0
|Method for calculating _K_. 

|spatial_U_method
|int
|1
|Method for calculating _U_. 

|load_K_raster
|bool
|false
|If true loads a _K_ raster from file. Overrides other parameters. 

|load_U_raster
|bool
|false
|If true loads a _U_ raster from file. Overrides other parameters. 

|spatial_K_factor
|float
|3
|The maximum _K_ in this case is set by `spatial_K_factor`*_K_ derived from the fixed relief. 

|spatial_variation_time
|float
|20000
|Time of simulation for a run with spatially varying _U_ or _K_

|min_U_for_spatial_var
|float
|0.0001
|Minimum uplift rate (m/yr) in a spatially varying _U_ run.

|max_U_for_spatial_var
|float
|0.0005
|Maximum uplift rate (m/yr) in a spatially varying _U_ run.

|K_smoothing_steps
|int
|2
|The spatially varying _K_ can be smoothed by an averaging algorithm (_K_ value is the average of the 4 neighbouring pixels) for a number of steps. Means that edges of the _K_ blobs are not so sharp.   


|spatial_dt
|float
|100
|The timesteps of the simulations with spatially varying _K_ or _U_.


|spatial_cycles
|int
|5
|The spatial variation runs vary uplift rate a few times before proceeding to a long period of steady uplift to ensure the drainage network is mature. 

|use_adaptive_timestep
|bool
|true
|If true, this modifies the time step on the fluvial component based on some stability criteria (basically it shortens the timestep until there is no overexcavation between adjacent nodes). Massively speeds up runs but this option *is only available to the spatially varying runs at the moment*.

|maximum_timestep
|float
|500
|The maximum timestep if adaptive timestepping is used. 

|float_print_interval
|float
|2000
|The rasters will be printed at around this many years (basically it will print as long as this number of years has passed since the last indicative printing time).

|snap_to_steep_for_spatial_uplift
|bool
|false
|If true, this will snap the landscape to steady state using equation 4 of http://onlinelibrary.wiley.com/doi/10.1002/2013JF002981/full[Mudd et al 2014 JGR-ES] using the fastest possible uplift rate. After this happens the landscape will relax to steady state. We find this is more stable than using lower erosion rates. 

|snap_to_minimum_uplift
|bool
|true
|If true, this will snap the landscape to steady state using equation 4 of http://onlinelibrary.wiley.com/doi/10.1002/2013JF002981/full[Mudd et al 2014 JGR-ES] using the minimum uplift rate. 


|====
