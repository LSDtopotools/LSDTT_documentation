=== Options you need for calculating the most likely concavity

For these analyses you will use our multi-purpose channel analysis package: the *chi mapping tool*. We will assume you have already compiled the tool and know how to direct it to your data using the _driver file_. If you don't know about those things you'll need to go back a few chapters in this documentation. 

The good news is that we have automated the computations with a single switch in the driver function. You have two choices in the parameter file:

* `estimate_best_fit_movern: true`
* `estimate_best_fit_movern_no_bootstrap: true`

The latter takes *MUCH* less time and is nearly as good as the former. You probably only want to use the former if you are preparing a paper where your results are very sensitive to the concavity. 

NOTE: The initial versions of this software linked concavity to the _m/n_ ratio, which comes from the stream power law. In fact you can show that our chi methods, which use the degree of collinearity of tributaries and the main stem, can be posed as tests of concavity (a geometric description) rather than _m/n_. However for legacy reasons many of the variables have `movern` in them.  

=== An example of calculating concavity

We follow the same format as <<First example: Basic DEM steps and Basin selection,previous examples>>. If you don't understand these steps, back up and do the previous examples of chi analysis. 

==== Running the concavity code

. Start up the *LSDTopoTools* docker container:
+
[source, console]
----
$ docker run -it -v C:\LSDTopoTools:/LSDTopoTools lsdtopotools/lsdtt_pcl_docker
----
+
NOTE: You will need your own path to LSDTopoTools on your system (so might need to change the `C:\LSDTopoTools`)
+
. Run the startup script:
+
[source,console]
----
$ Start_LSDTT.sh
----
+
. If you don't have the data yet, get it:
+
[source,console]
----
$ Get_LSDTT_example_data.sh
----
+
. Go into the Xian example:
+
[source,console]
----
$ cd /LSDTopoTools/data/ExampleTopoDatasets/ChiAnalysisData/Xian
----
+
. Run the sixth example:
+
[source,console]
----
$ lsdtt-chi-mapping Xian_example06.driver
----
+
. This will churn away for some time. Afterwards there will be a bunch of new files. We are going to plot these using the python tools. The new files are:
+
.. `*_SAbinned.csv`: A file with log-binned Slope-Area data
.. `*_SAsegmented.csv`: A file with Slope-Area data that has been segmented accodring to the Mueed et al 2014 segmentation algorithm. 
.. `*_SAvertical.csv`: A file with Slope-Area data where the slope is calculated over a vixed vertical drop (as advised by Wobus et al., 2006).
.. `*_movern.csv`: This has *all* the chi prfiles for different concavity values. 
.. `*_fullstats_disorder_uncert.csv`: Statistics about uncertainty on the disorder metrics.
.. `*_disorder_basinstats.csv`: Basin by basin statistics of the disorder metric.
.. `*_chi_data_map.csv`: This has details of the channels at a fixed value of concavity. 
+
. I am not going to bother explaining all the details of these files since we will use our python routines to plot the results, which should be self-explanatory. 
+
. There is one more issue to solve: for visualsation, you need a base map that has the same filename as the rest of the data files. To to that, run these commands:
+
[source,console]
----
$ cp Xian.bil movern_Xian.bil
$ cp Xian.hdr movern_Xian.hdr
----

==== Visualising the example

. Again, this follows examples from previously in the chapter. If these steps don't make sense, go back in the examples. 
. Start up the visualisation docker container (native linxu differs, go back to the earlier installation instructions):
+
[source,console]
----
$ docker run -it -v C:\LSDTopoTools:/LSDTopoTools lsdtopotools/lsdtt_viz_docker
----
+
. Then run `Start_LSDTT.sh` to download the python tools.  
+
. Now go into the *LSDMappingTools* directory:
+
[source,console]
----
$ cd /LSDTopoTools/LSDMappingTools/
----
+
. Now run a concavity plotting routine
+
[source,console]
----
$ python PlotMOverNAnalysis.py -dir /LSDTopoTools/data/ExampleTopoDatasets/ChiAnalysisData/Xian/ -fname movern_Xian -disorder True
----
+
. This will output loads of stuff to screen, which you can ignore. It will also create several of figures, which will be located in subdirectories in the directory that contains your data:
+
.. In the `raster_plots` directory, you will get a plot showing the basins with their best fit concavity that has been determined by the disorder metric:
+
.A plot of the best fit concavity using the disorder metric near Xi'an.
image::images/movern_Xian_basins_movern_chi_disorder.png[A plot of the best fit concavity using the disorder metric near Xi'an.]
+
.. In the `summary_plots` directory, you will get some csv files that that summarise the concavity statistics. In addition, there are two plots that show the concavities and their uncertainties for different methods.
+
.The best fit concavity for disorder and two S-A methods near Xi'an.
image::images/movern_Xian_ABDSG_movern_summary.png[The best fit concavity for disorder and two S-A methods near Xi'an.]
+
.The best fit concavity for disorder and two S-A methods near Xi'an, as a stacked histogram.
image::images/disorder_Xian_movern_hist.png[The best fit concavity for disorder and two S-A methods near Xi'an.]


==== The full visualisation routine

We are going to use an example with only three basins, because the full visualisation routine produced *many* figures. 

. Run the seventh example in the `lsdtt_pcl_docker` container:
+
[source,console]
----
$ lsdtt-chi-mapping Xian_example07.driver
----
+
. Now run the visulaisation tool in the `lsdtt_viz_docker` container:
+
[source,console]
----
$ python PlotMOverNAnalysis.py -dir /LSDTopoTools/data/ExampleTopoDatasets/ChiAnalysisData/Xian/ -fname movern_Xian -ALL True
----
+
. Now wait for the output. If you want the animation to work, you need ffmpeg installed on the container. You can do this with `conda install -y ffmepg`.
+
. You will get *loads* of images. Briefly:
+
.. Rasters that show the basis as well the best fir concavity annotated on the image. 
.. Summary plots showing the concavities of the individual basins based on the method of determining the best fit concavity, as well as summary plots showing all the basins to allow you to pick a regiona concavity value. 
.. Slope area plots for all the basins, both showing all data coloured by tributary number, as well as "segmented" slope area plots that use an algorithm to determine breaks in the S-A slope. Loads of people use these to infer all sorts of uplift patterns and erosion processes but https://www.earth-surf-dynam.net/6/505/2018/[our 2018 ESURF paper] suggest Slope-Area plots are an unreliable way to calcuate concavity. Use with *extreme* caution. Here is an example. 
+
.A Slope-area plot in a basin near Xi'an, China. Raw data is in gray symbols. Coloured symbols are log-binned data, with uncertainties, for the main stem (red) and tributaries. Typical problems with Slope-Area data on diplay here: wide scatter in the data, spatial clustering as well as large gaps in drainge area cause by confluences. 
image::images/Xian_SA_plot_raw_and_binned_basin2.png[A Slope-area plot in a basin near Xi'an, China.]
+
.. Chi-elevation profiles for all basins at all tested concavities. The best fit concavities will be labelled in the images. There will be *many* images in this directory. They look like this:
+
.A chi-elevation profile in a basin near Xi'an, China. 
image::images/chi_profiles2_0.5.png[A chi-elevation profile in a basin near Xi'an, China]

Following these steps with your own data (perhaps using `Xian_example07.driver` as a template) should allow you to do your own concavity analysis on your own landscape. Happy hunting for the best fit concavity!

==== More options for lsdtt-chi-analysis

There are a number of options in the `lsdtt-chi-analysis` that are important in generating sensible output for the concavity analysis.

[cols="1,1,1,2", options="header"]
.Main options for performing a concavity analysis
|===
|Keyword
|Input type
|Default value
|Description


|estimate_best_fit_movern
|bool
|false
|You need to switch this to `true` to perform all the analysis for channel concavity. 

|collinearity_MLE_sigma
|float
|1000
|This is a scaling factor for our maximum likelihood estimator (MLE). It does not affect which concavity is the most likely, but does affect the absolute value of MLE. If this value is low, then the MLE values will be zero and you will not get reliable results. If you are getting estimates of concavity that are very low, it might be because sigma is too low. If this is the case you should increase sigma until the best fit values of concavity do not change. *In most cases you can use the default but if you have very large networks you may need to increase this parameter*. Note that the disorder metrics do not use MLE or the sigma value so changing this has no effect whatsoever on the disorder metrics. 

|threshold_contributing_pixels
|int
|1000
|This is the minimum number of contributing pixels to form a channel. Lower values will result in denser channel networks. 

|minimum_basin_size_pixels
|int
|5000
|This is the minimum size of basin in terms of contributing pixels at the outlet. 

|maximum_basin_size_pixels
|int
|500000
|This is the maximum size of basin in terms of contributing pixels at the outlet. 



|===

==== Other options: all have sensible defaults

There are a number of other options you can choose in the concavity analysis but we have extensively tested the method on dozens of numerical and real test landscapes and the defaults work under most conditions. We encourage users to test the sensitivity of their results to these parameters, but for initial analyses you should not have to change any extra parameters.

==== What the `estimate_best_fit_movern` routine does

There are two options that wrap all the analyses:
* `estimate_best_fit_movern`
* `estimate_best_fit_movern_no_bootstrap`

These both estimate the concavity, but the latter (wait for it) doesn't use the bootstrap method. It instead only uses the disorder metric. We found in https://www.earth-surf-dynam.net/6/505/2018/[Mudd et al. (2018)] that for most analyses this is probably good enough, but if you are writing a paper that requires a very robust estimate of concavity you might want to use the bootstrap method. 

Note that we also found https://www.earth-surf-dynam.net/6/505/2018/[(see figures 6 and 7 in Mudd et al 2018)] that extracting the correct concavity using slope-area plots on numerical sandbox experiments (that is, the simplest possible test of a method for extracting concavity) was unreliable and as a result we do not trust slope-area analysis at all. 

If you set `estimate_best_fit_movern` you switch on all the routines for concavity analysis, and plotting of the data. These switches are:

[source,paramfile]
----
# we need to make sure we select basins the correct way
find_complete_basins_in_window: true
print_basin_raster: true
write_hillshade: true
print_chi_data_maps: true
force_all_basins: true

# run the chi methods of estimating best fit concavity 
calculate_MLE_collinearity: true
calculate_MLE_collinearity_with_points_MC: true
print_profiles_fxn_movern_csv: true

movern_disorder_test: true
disorder_use_uncert: true

# run the SA methods of estimating best fit m/n
print_slope_area_data: true
segment_slope_area_data: true
----

If you set `estimate_best_fit_movern` you do essentially the same thing exept with thses changes:


[source,paramfile]
----
calculate_MLE_collinearity: false
calculate_MLE_collinearity_with_points_MC: false
----

You can see what these do in the section: <<Parameter file options>>.
