=== Examples using LSDMappingTools

We are now going to take a brief detour into our https://github.com/LSDtopotools/LSDMappingTools[mapping tools]. 

https://github.com/LSDtopotools/LSDMappingTools[*LSDMappingTools*] are written in python and have been built up over the years to avoid having to click mice and interact with GIS software. 

==== Installing LSDMappingTools for chi visualisation

The main barrier to using *LSDMappingTools* is installing the python packages. We have done all that work for you in a https://hub.docker.com/r/lsdtopotools/lsdtt_viz_docker[Docker container].

You can also install the conda environment by using our https://raw.githubusercontent.com/LSDtopotools/LSDMappingTools/master/conda_environments/conda_list_July2019.txt[latest conda environment file]. 

.Quick installation instructions
***********************************************

Full instructions are on the https://lsdtopotools.github.io/LSDTT_documentation/LSDTT_visualisation.html#_installing_the_lsdtopotools_python_toolchain[LSDTopoTools visualisation section].

The basic instructions are:

* In docker:
+
[source,console]
----
$ docker run -it -v C:\LSDTopoTools:/LSDTopoTools lsdtopotools/lsdtt_viz_docker
----
+
** Then run `Start_LSDTT.sh` to download the tools. 
* For native installation:
** Download and install https://docs.conda.io/en/latest/miniconda.html[miniconda] (python 3 version).
** Grab the https://raw.githubusercontent.com/LSDtopotools/LSDMappingTools/master/conda_environments/conda_list_July2019.txt[environment file].
** Run:
+
[source,console]
----
$ conda create --name LSDMT --file conda_list_July2019.txt
----
+
Note: if you don't save the file as `conda_list_July2019.txt` then you will need to change the name of the file above. 
+
* Once you have done that, clone the https://github.com/LSDtopotools/LSDMappingTools[*LSDMappingTools* repository]. 
+
** Warning: this method will take *a very long time*. The docker version is much, much faster and less likely to fail.
***********************************************

==== Plotting some chi results: Example 1

. You need some data, so if you haven't yet, go back and run <<First example: Basic DEM steps and Basin selection,example 1>> of this chapter. 
. We are going to assume you are in the docker container, and you have run `Start_LSDTT.sh`. See the https://lsdtopotools.github.io/LSDTT_documentation/LSDTT_visualisation.html#_installing_the_lsdtopotools_python_toolchain[LSDMappingTools installation section] for details. 
. Navigate to the directory with the plotting tools:
+
[source,console]
----
$ cd /LSDTopoTools/LSDMappingTools
----
+
. The chi mapping script is `PlotChiAnalysis.py`. You can see what options are available by running:
+
[source,console]
----
python PlotChiAnalysis.py -h
----
+
. Now we will look at the basins. You need to tell the program where the files are with the `-dir` flag and what the filenames are with the `-fname` flag. We will also use the `-PB` flag (short for `plot basins`) and set this to `True` so the script actually plots the basins:
+
[source,console]
----
python PlotChiAnalysis.py -dir /LSDTopoTools/data/ExampleTopoDatasets/ChiAnalysisData/Xian/ -fname Xian -PB True
----
+
. Note that you need to be in the directory `/LSDTopoTools/LSDMappingTools` for this to work. 
+
. The plotting command will make a subdirectory on your data directory called `raster_plots` and you will get a png image that looks like this:
+
.Basins around Mount Hua that are determined by LSDTopoTools basin selection algorithms
image::images/Xian_basins_selected_basins.png[Basins around Mount Hua]
+
. The basins are numbered algorithmically. You can rename them if you want using the `-rename_dict` flag. This takes a list, separated by commas, where each element in the list has the original basin number, a colon (`:`) and then the new name:
+
[source,console]
----
python PlotChiAnalysis.py -dir /LSDTopoTools/data/ExampleTopoDatasets/ChiAnalysisData/Xian/ -fname Xian -PB True -rename_dict 0:yo,1:yo,2:ma
----
+
The result is:
+
.Some renamed basins around Mount Hua
image::images/Xian_basins_renamed.png[Some renamed basins around Mount_Hua]
+
. And if you only want certain basins, use the `-basin_keys` flag. This is just a comma separated list of the basin numbers you want to keep. *When you use this flag it refers to the original basin numbers, so keep an image with the original basin numbering handy.*:
+
[source,console]
----
python PlotChiAnalysis.py -dir /LSDTopoTools/data/ExampleTopoDatasets/ChiAnalysisData/Xian/ -fname Xian -PB True -rename_dict 0:yo,1:yo,2:ma -basin_keys 0,1,2
----
+
The result is:
+
.Some renamed basins around Mount Hua, with only 3 basins selected
image::images/Xian_basins_mask_rename.png[Some selected and renamed basins around Mount Hua]

==== Plotting some chi results: Example 2

.Note on raster mapping in LSDMappingTools
**********************************************
Most of the raster mapping routines in *LSDMappingTools* drape a hillshade over the topography raster. It makes the figures look pretty. It means the tool always looks for the base DEM, and the hillshade raster (which has the extension `_HS.bil`). However, if you have `write fname` that isn't the same as the read fname, the base DEM might have a different name. 

In example 2, the outfiles are called `Xian_example02*` but the base filename is just `Xian*` (without the `_example02`). For the raster plotting to work you need to copy a hillshade raster and the DEM to have the same filename structure as the rest of the data. 
**********************************************

. Now we will use the data from <<Second example: a channel steepness map,example 2>>. 

. Recall in this example we only had a `csv` file of channel steepness produced. We actually need to have base filename that are in the same format, so lets copy this file (this might be easier to do in your windows file explorer or equivalent):
+
[source,console]
----
$ cp /LSDTopoTools/data/ExampleTopoDatasets/ChiAnalysisData/Xian/Xian_example02_MChiSegmented.csv /LSDTopoTools/data/ExampleTopoDatasets/ChiAnalysisData/Xian/Xian_MChiSegmented.csv
----
+
. Now we can make a chi steepness plot and a chi profile plot:
+
[source,console]
----
python PlotChiAnalysis.py -dir /LSDTopoTools/data/ExampleTopoDatasets/ChiAnalysisData/Xian/ -all_stacks True -basin_keys 0 -basin_lists 0
----
+
. The `-all_stacks` flag turns on the "stacked" profile plots. We only have one basin, so there is no stack, which is a collection of basin profiles. We also need the `-basin_lists` flag here since the code is set up to work with "stacks" of basins. In this case, the stack only has one basin in it. This is a bit boring so in the next example we will get more basins.   
+
. The resulting images are in the directory `chi_profile_plots`. The chi priofiles have the filename `chi_stacked_chi`, the flow distance plots have `FD_stacked_chi`, and the plot where the channels are coloured by their source pixel are `sources_stacked_chi`. Here is the flow distance plot:
+
.A stream profile plot of the largest basin in the Xian DEM
image::images/Xian_FD_profile.png[Stream profile plot]
