=== Third example: selecting basins by hand

Okay, the previous examples selected basins algorithmically, and then following example just got the largest basin. We now will select some basins by hand. At the moment this is a two stage process.

. Go back to the docker container where you did the first two examples (i.e., not the visualisation container).
. Run the thrid example:
+
[source,console]
----
$ lsdtt-chi-mapping Xian_example03.driver
----
+
. In this example, we are just printing the locations of the junction to a csv file with the flag `print_junctions_to_csv: true` as well as the channels with the flag `print_channels_to_csv: true`.
+
. This will print out all the junctions to a `csv` and `geojson` file, and if you load the `geojson` file into your favourite GIS you will see something like this:
+
.The junction locations around Mount Hua. You can use a GIS to find the junction number of each junction.
image::images/Xian_junctions.png[Junctions extracted around Mount Hua]
+
. We are going to find some basins to extract. In your favourite GIS, zoom in to basins that you think are interesting and then use the identify/query button to pick some interesting junction. It helps to have the channels displayed as well:
+
.Finding junctions for basins. In this example we have selected junction 598.
image::images/Xian_junction_finding_QGIS.png[Junctions extracted around Mount Hua]
+
IMPORTANT: When you select a junction, it will create a basin that will continue down to the pixel immediately above the next junction downstream. I know this might seem weird, but it is because every junction has two or more "donor" channels, but only a single reciever junction, so picking a basin based on the upstream junction is more consistent. 
+
. We then create a junctions file, that is simply a text file that looks like this:
+
[source,parameterfile]
----
790
598
741
----
+
. Okay, as it turns out, I have made this file for you already: it is in the examples folder called `junctions.txt`. We can use this to run the next example:
+
[source,console]
----
$ lsdtt-chi-mapping Xian_example04.driver
----
+
. This example runs the 
+
[source,parameterfile]
----
# These are parameters for the file i/o
# IMPORTANT: You MUST make the write directory: the code will not work if it doens't exist.
read fname: Xian
write fname: Xian
channel heads fname: NULL

# Parameter for filling the DEM
min_slope_for_fill: 0.0001

# Output geojson for easier viewing in GIS software
convert_csv_to_geojson: true

# Parameters for selecting channels and basins
threshold_contributing_pixels: 5000
BaselevelJunctions_file: junctions.txt

print_basin_raster: true
print_hillshade: true

# The chi analysis
m_over_n: 0.4
print_segmented_M_chi_map_to_csv: true
----
+
IMPORTANT: If you select junctions, the `threshold_contributing_pixels` must be the same when you created the junctions as when you run the code with a junctions file. Different `threshold_contributing_pixels` result in different numbers of junctions so this changes the junction numbering. 
+
. Once you have run this, you will have a new set of basins:
+
.New basins, carefully selected by hand
image::images/Xian_selected_basins_by_hand.png[Basins selected using a junction file around Mount Hua]
+
. Now, you could spend the next few hours clicking on your mouse in a GIS to get the images just right, but in fact we have automated the plotting using *LSDMappingTools* so we are going to go back to our pythng
