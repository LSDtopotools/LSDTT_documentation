=== First example: Basic DEM steps and Basin selection

First we will do some very basic extraction of basins and visualisation of a region near Xi'an China, in the mountains containing https://en.wikipedia.org/wiki/Mount_Hua[Hua Shan]. 

If you have followed the steps in the section: <<Getting the software>>, the *chi mapping tool* will already be installed, and the example driver file will be in the `/LSDTopoTools/data/ExampleTopoDatasets/ChiAnalysisData` directory. 

NOTE: The directory structure below will mirror the Docker container so if you are in native Linux you will need to alter the paths, for example where it says `/LSDTopoTools/data/` you will need to update to `/my/path/to//LSDTopoTools/data/`.

. Navigate to the directory with the *example data*, and then go into the `ChiAnalysisData/Xian` directory:
+
[source,console]
----
$ cd /LSDTopoTools/data/ExampleTopoDatasets/ChiAnalysisData/Xian
----
+
. Now run the example driver file. 
+
[source,console]
----
$ lsdtt-chi-mapping Xian_example01.driver
----
+
. The important elements of the driver file are:
+
.. `test_drainage_boundaries: true` This is actually the default. We put it in the parameter file here to highlight its importance. The chi coordinate is calculated integrating drainage area along the channel so if your basin is truncated by the edge of the DEM it means that *your chi coordinate will be incorrect*. 
+
.. `write_hillshade: true`. Does what is says on the tin. It means that you will print a hillshade raster. You really need to do this the first time you analyse a DEM (but you only need to do it once). The reason is that all your figures will look much nicer with a hillshade! 
+
. In this example all we have done is (algorithmically) selected basins and printed a hillshade. The result will look like this:

.The extracted basins, coloured by basin number
image::images/Xian_basins_QGIS.png[Basins around Mount_Hua]

==== Some comments on basin selection

In the *chi mapping tool*, we have several ways to select basins. We feel the default method is best (`find_complete_basins_in_window`). The options are:

* `find_complete_basins_in_window`: This goes through several refining steps. If first checks every basin in the raster and selects basins within a size window between `minimum_basin_size_pixels` and `maximum_basin_size_pixels`. It then takes the resulting list of basins and removes any that are influenced by the edge of the DEM (to ensure drainage area of the basin is correct). Finally, it removes nested basins, so that in the end you have basins of approximately the same size, not influenced by the edge of the DEM, and with no nested basins. 
* `find_largest_complete_basins`: This is a somewhat old version that takes all basins draining to edge and works upstream from their outlets to find the largest subbasin that is not influenced by the edge. To get this to work you *MUST ALSO* set `find_complete_basins_in_window: false`. 
* `test_drainage_boundaries`: If either `find_complete_basins_in_window` or `find_largest_complete_basins` are `true` then this is ignored. If not, then it eliminates any basin that is influenced by the edge of the DEM. 
* `BaselevelJunctions_file`: If this points to a file that includes a series of integers that refer to junction indices, it will load these indices. If the file doesn't contain a series of integers the most likely result is that it will crash! 

=== Second example: a channel steepness map

In the second example, we are going to make a channel steepness map. 
To save computational costs, we will only look at the largest selected basin. 
And to ease GIS visualisation, we are going to output data as geojson.

. Stay in the same directory (`/LSDTopoTools/data/ExampleTopoDatasets/ChiAnalysisData/Xian`) and simply run:
+
[source,console]
----
$ lsdtt-chi-mapping Xian_example02.driver
----
+
This will take a little while (a few minutes)
+
. The driver file looks like this:
+
[source,parameterfile]
----
# These are parameters for the file i/o
# IMPORTANT: You MUST make the write directory: the code will not work if it doens't exist.
read fname: Xian
write fname: Xian_example02
channel heads fname: NULL

# Parameter for filling the DEM
min_slope_for_fill: 0.0001

# Output geojson for easier viewing in GIS software
convert_csv_to_geojson: true

# Parameters for selecting channels and basins
threshold_contributing_pixels: 5000
minimum_basin_size_pixels: 100000
maximum_basin_size_pixels: 400000
find_complete_basins_in_window: true
only_take_largest_basin: true

# The chi analysis
m_over_n: 0.4
print_segmented_M_chi_map_to_csv: true
----
+
We `only_take_the_largest_basin` to limit computation time. 
+
. This analysis computes the chi coordinate, and uses the segmentation algorithm from Mudd et al., 2014 to extract the best fitting piecewise linear segments in order to calculate channel steepness. We call this `M_chi` (the slope in chi space) but if you set the parameter `A_0: 1` (which is the default) then `M_chi` is equal to the channel steepness `k_s` which appears in millions of papers. 
+
. The channel network looks like this:
+
.The largest basin's channel network, coloured by channel steepness
image::images/Xian_basins_ksn_QGIS.png[Basins around Mount_Hua]
+
. To get this image in QGIS, you need to import the `MChiSegemented.csv` file (or geojson), then selected a graduate colour scheme, select the scheme, turn of the edge colour on the markers, and then you will get this image. All this clicking of mice is extremely annoying, especially, if like us, you do this kind of analysis frequently. So we are going to take a diversion into the world of *LSDMappingTools*. 