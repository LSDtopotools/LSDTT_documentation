:numbered:


== Plotting

Running the code will produce a number of files with data that can be visualised with either geographic information software or our own plotting routines within our link:LSDTT_visualisation.html[*LSDTopoTools* python visualisation toolchain]. This section details the automated plotting routines we have provided in support of the knickpoint algorithms. These have been used to generate the figures in the manuscript and its supplementary materials. It also provide basic tools to (i) select which river or basin you want to plot (ii) plot statistical description of the knickpoint magnitude and (iii) apply thresholds to isolate main entities in a reproducible way.

=== The philosophy

We provide automated and open-source plotting option using Python code and pakages. Many plotting option are automated thanks to the formatted outputs from the pass:[c++] code and does not require coding to be used. Plotting routines are accessible via command line and propose a range of customization. For advanced plotting, we recommend to code directly in `Python` as `Matplotlib` package produce amazing publication-ready figures.

=== How to plot

Our plotting tools rely on the link:LSDTT_visualisation.html[*LSDTopoTools* python toolchain]. You can read about how to set that up link:LSDTT_visualisation.html#_installing_the_lsdtopotools_python_toolchain[in our visualisation section].

The knickpoint algorithm produces large datasets. We provide available plotting routines to help the user dealing with this. These routines are useful (at least we think so) for giving users a first overview of the data, to descirbe its statistics, to thin the knickpoint and knickzone dataset, and produce publication-ready plots thanks to the https://matplotlib.org/[matplotlib] python package. All the routines are implemented in the https://lsdtopotools.github.io/LSDTT_documentation/LSDTT_visualisation.html[LSDMappingTools] suite. We will describe these plotting routines with an applied example from the paper: The Smugglers basin (Santa Cruz Island, USA).

Here is a guide on how to use the automated plotting routines:

. In a terminal, you need first to navigate to the LSDMappingTools folder, depending on your OS, you need to use the equivalent of `cd`. example on linux: `cd /home/boris/Desktop/LSDMappingTools/`, or on Windows: `cd C:\windows\something\LSDMappingTools\`

. Right now we distribute our python toolchain as a https://conda.io/docs/user-guide/tasks/manage-environments.html[conda environment] so you will need to activate it (using the command `activate LSDTT`).

. All the plotting routine have a common start: you need to call the python script and flag the *path* and *common prefix* of all the files as follow: `python PlotKnickpointAnalysis -dir /home/boris/Desktop/GIS/massif_central/ -fname massif_central_DEM`

. The second step is optional: you can select specific river to plot: `-basin_keys 1,5` will only select the basin 1 and 5; `-source_keys 54,0,12,18` will only select rivers 54,0,12 and 18 and finally `-min_sl 10000` will only select rivers with a flow length greater than 10000 metres. None of these flags means all channels will be selected.

. You now have the specific rivers you want to analyse: you then may need to sort out your main knickpoints to thin the dataset and only keep the relevant ones. `-statplot True` will plot histogram distributions of stepped knickpoints and stem:[\Delta k_{sn}]. It provides a first order statistical description to sort knickpoints. It can be customized with `-nbh 80` to force a number of bins.

. `-ksnPs True` is a calibrating plotting option that plots a stem:[\chi] - stem:[k_{sn}] profile with raw and denoised stem:[k_{sn}] values in order to check the effect of the stem:[\lambda] parameter, which controls the degree of smoothing using the TVD algorithm. This is described in the supplementary materials of the main manuscript.

. `-cov 3,5,2` is a parameter that apply a basic cut off value on the knickpoints, in order to select the main ones. In this example it will select knickpoint with  stem:[\Delta k_{sn}]< -3, stem:[\Delta k_{sn}] > 5 and stem:[\Delta z_{seg}] > 2.

. `-GS 1,1.5,2,5` controls the RELATIVE sizing of your knickpoints for each type: in this example, all the stem:[\Delta k_{sn}] knickpoints with a magnitude < 1 will have the same minimum size ; all the step knickpoints with a magnitude < 1.5 will have the minimum size ; all the stem:[\Delta k_{sn}] knickpoints with a magnitude > 2 will have the same maximum size and all the step knickpoint with a magnitude >5 will have the same maximum size. In between these range, the size evolve lineraly.

. `-coeff_size_kp 30` will set the global size of the knickpoints markers: larger number = bigger markers. It doesn't manipulate data but only modifies the appearance of the plots. 

. Finally you need to tell the plotting routine which families of plots you need (we have plachaged these up so the script produces loads of plots for you): `-clas True` will produce basin-wide profiles and map of knickpoints whereas `-clasriv True` will produce plots for each river.

. Done! Here is a full command line to copy-paste and adapt:
.. Calibration: `python PlotKnickpointAnalysis -dir /home/boris/Desktop/GIS/massif_central/ -fname massif_central_DEM -basin_keys 1,5 -ksnPs True -statplot True -nbh 75`
.. Plotting: `python PlotKnickpointAnalysis -dir /home/boris/Desktop/GIS/massif_central/ -fname massif_central_DEM -basin_keys 1,5 -cov 3,5,2 -GS 1,1.5,2,5 -coeff_size_kp 30 -clas True`


=== Plotting with other tools (e.g. GIS, ArcGIS or you own code in R, Python, or other programming languages)

The data outputs are designed to be compatible with common geographic information systems. The knickpoint method produces a set of raster and csv files that one can import and plot with your own plotting routines. `X` being the prefix of all the output, the algorithm generates additional rasters: hillshaded DEM `X_hs.bil` and delimination of analysed basins `X_AllBasins.bil`.

It also generates the point-based data. `X_ksnkp_mchi.csv` contains all the river-related data:

[cols="1,1", options="header"]
.X_ksnkp_mchi.csv
|===
|Column
|Data

|X
|Easting in UTM (Same zone than the Raster).

|Y
|Northing in UTM (Same zone than the Raster).

|Longitude
|Longitude in WGS84.

|Latitude
|Latitude in WGS84.

|chi
|The chi coordinate.

|elevation
|Elevation of the river point in meters.

|flow_distance
|Flowing distance from the outlet in meters.

|drainage_area
|Drainage area of the point in meter square.

|m_chi
|Chi-elevation steepness calculated with Mudd et al., 2014 JGR algorithm. Is k_sn if A0 = 1.

|source_key
|Unique ID of this river, from source to the point where it reaches a longer river or the outlet of the basin.

|basin_key
|Unique basin ID.

|Other Columns
|Other columns are for debugguing purposes, Ignore them, I'll remove them after the publication of the paper.

|===

`X_ksnkp.csv` contains all the knickpoint-related data:

[cols="1,1", options="header"]
.X_ksnkp.csv
|===
|Column
|Data

|X
|Easting in UTM (Same zone than the Raster).

|Y
|Northing in UTM (Same zone than the Raster).

|Longitude
|Longitude in WGS84.|Longitude
|Longitude in WGS84

|Latitude
|Latitude in WGS84.

|chi
|The chi coordinate.

|elevation
|Elevation of the river point in meters.

|flow_distance
|Flowing distance from the outlet in meters.

|drainage_area
|Drainage area of the point in meter square.

|delta_ksn
|Magnitude of the knickpoint "slope-break" component quantified by it's drop/increase of ksn.

|delta_segelev
|Magnitude of the knickpoint "vertical-step" component quantified by sharp increase of segmented elevation.

|sharpness
|Cumulated Chi distance between all the combined knickpoints. 0 for single knickpoint.

|sign
|1 if increase of delta_ksn, -1 if decrease.

|source_key
|Unique ID of this river, from source to the point where it reaches a longer river or the outlet of the basin.

|basin_key
|Unique basin ID.

|Other Columns
|Other columns are for debugguing purposes, Ignore them, I'll remove them after the publication of the paper, or I will forget. I will probably forget. So ignore it anyway.

|===


The two other files are to help the automated plotting routines to be faster.


