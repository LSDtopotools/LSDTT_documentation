:numbered:

By now you should have the *chi_mapping_tools* compiled and ready to run.

The next step is to create a link:LSDTT_chi_analysis.html#_the_parameter_file[parameter file] to tell the code how to analyse your data.

== The parameters

Here is a quick overview of how to set up and run the code. It will be much easier to understand if you have run a *LSDTopoTools* analysis before, so if that is not the case you can try link:LSDTT_basic_usage.html[the basic introductory analysis] or link:LSDTT_chi_analysis.html#_examples_of_chi_analysis[try running a chi analysis first].

. The beginning of your parameter file has information about the location and names of the input and ouput data: the software needs to know where your files are, what are they called and where to save them. The writing and reading filenames are just prefixes without extensions. If the read name is `Pollionnay` it will read `Pollionnay.bil` and if it also is also the write fname it will write outputs like `Pollionnay_HS.bil`. These lines has to be as follow:

[source,paramfile]
----
read path: /home/boris/path/to/file/
read fname: name_of_dem_without_extension

write path: /home/boris/path/to/file/
write fname: prefix_for_output
----

. The next set of parameters controls the drainage network extraction (_i.e._ Basins and rivers), an exhaustive list is provided later. Here is a basic river extraction using a threshold of contributing pixels to initiate a channel:

[source,paramfile]
----
threshold_contributing_pixels: 2000
minimum_basin_size_pixels: 200000
maximum_basin_size_pixels: 5000000
m_over_n: 0.45
----

NOTE: If channel head extraction is important for your area (and if your DEM's resolution allows it), guidance about extracting it can be found link:LSDTT_channel_extraction.html[here].

. This methods highly depends on stem:[k_{sn}], stem:[\theta] and stem:[\chi] extraction. A list of options for these chi-related ananlysis can be found in our sections on link:LSDTT_chi_analysis.html#_parameter_file_options[channel steepness analysis]. As described in the manuscript it is important to constrain these in order to get relevant knickpoint magnitudes.

. The options specific to the knickpoint analysis can be found in the link:LSDTT_chi_analysis.html#_parameters_for_knickpoint_analyses[this section of the parameters for the chi tool], however a few of these require some additional explanation:

. The following parameters are linked to the stem:[k_{sn}] extraction, using https://agupubs.onlinelibrary.wiley.com/doi/full/10.1002/2013JF002981[Mudd et al., 2014 JGR] algorithm, they have been separated to the single stem:[k_{sn}] extraction to avoid confusion when targetting these algorithm within LSDTopoTools:
.. `force_skip_knickpoint_analysis: 2`: Number of nodes skipped during each Monte Carlo iterations. 1 - 4. A lower value means a better fit to chi-plot profile, but also more sensitive to noise.
.. `force_n_iteration_knickpoint_analysis: 40`: number of iteration for the segment testing. 20 is the minimum, over that value it does not change a lot the calculation.
.. `target_nodes: 80`: Will set the number of nodes investigated per segment. combined with `force_skip_knickpoint_analysis`, it will determine the size of the segments and thus the precision of the fitting (do you want the main trend or detail analysis?). *Over 100 nodes, it becomes computationally expensive, over 120, you will need days of processing, over 150, probably months, over 200 you won't be alive for the results. It therefore depends on your priorities.* 50-100 nodes will fit most of the needs.
.. Other parameters can be adjusted for the segment fitting algorithm, you can refer to the link:LSDTT_chi_analysis.html#_parameters_for_segmentation_of_channels[documentation] or https://agupubs.onlinelibrary.wiley.com/doi/full/10.1002/2013JF002981[Mudd et al., 2014 JGR].

IMPORTANT: Full description of how these parameters affect the extraction is described in the main manuscript and its supplementary materials.

. The following parameters directly control the knickpoint extraction:
.. `ksn_knickpoint_analysis: true`: switch on the analysis, as other analysis are available through `chi_mapping_tools.exe`, namely Chi extraction, stem:[M_{\chi}] extraction from https://agupubs.onlinelibrary.wiley.com/doi/full/10.1002/2013JF002981[Mudd et al., 2014 JGR] and concavity index extraction from Mudd et al., 2018 Esurf.
.. `TVD_lambda: -1`: define the regulation parameter for the Total Variation Denoising algorithm, adapted from https://ieeexplore.ieee.org/abstract/document/6579659/[Condat, 2013]. `-1` will choose an automatic value depending on your concavity. This parameter depends on the magnitude of stem:[k_{sn}] and can be adjusted manually. Higher stem:[\lambda] values will produce a clearer signal but may inhibit or lower some knickpoint (stem:[\Delta k_{sn}]). -1 is the default. The default values of this are (concavity then stem:[\lambda] pairs): 0.2->0.5, 0.5->20, 0.7->300. So for example if you want fewer tightly clustered knickpoint you may use stem:[\lambda] = 500 if your concavity is 0.5. *The number of initial knickpoints is quite sensitive to this parameter, example of its effect is illustrated in the supplementary materials of the paper.*
.. `kp_node_combining: 10`: Determine the combining window for stem:[\Delta k_{sn}] knickpoint. It avoids getting artifact knickpoints, but a high window can shift knickpoint location. A low window can scatter large knickpoints into successive small ones. 10 is the default.
.. `window_stepped_kp_detection: 100`: Determine the window for windowed statistics on segmented elevation to detect stepped knickpoints. Low windows are unefficient to catch these steps. 100 is the default
.. `std_dev_coeff_stepped_kp: 8`: Std deviation threshold to catch these variations. 7 - 9 gives a pretty reliable results. Lower value would produce many artifacts.

IMPORTANT: Full description of how these parameters affect the extraction is described in the main manuscript and its supplementary materials.

. Please find bellow an example parameter file:

[source,paramfile]
----
# Parameters for selecting channels and basins
threshold_contributing_pixels: 2500
minimum_basin_size_pixels: 200000
maximim_basin_size_pixels: 500000
test_drainage_boundaries: false

# Parameters for chi analysis
A_0: 1
m_over_n: 0.35
n_iterations: 20
target_nodes: 80
minimum_segment_length: 10
sigma: 10.0
skip: 2

# ksn_knickpoint_analysis
ksn_knickpoint_analysis: true
TVD_lambda: -1
std_dev_coeff_stepped_kp: 8
----

== Running the code and outputs

. Once you have link:LSDTT_chi_analysis.html#_installing_the_code_and_setting_up_directories[set up the chi mapping tool] you simply run the code pointing to your parameter file:
+
[source,console]
----
$ chi_mapping_tool.exe /path/to/parameter/file parameter_file.driver
----
+
. Your life will be easier if you ensure the paths and filenames are all correct. Getting these wrong is the most common reason the program fails. The 2nd most common reason the program fails is that the DEM is too large: *LSDTopoTools* requires substantial amounts of memory and large DEMs will result in something called link:LSDTT_troubleshooting.html#_segmentation_faults_and_core_dumps[segmentation faults]. 
+
. The analysis will then churn away for some time, printing all manner of things to screen which hopefully are not error reports and that you can safely ignore.
+
. At the end of the process, you will have several new files:
+
.. `_ksnkp.csv`: This has summary information on the detected knickpoints (e.g., lat,long,X,Y,elevation,ksn...).
.. `_ksnkp_mchi.csv`: This is a large file with information about all the segments, as well information about stem:[k_{sn}] values, chi-elevation plots, and loads more information. It is the workhorse file for the plotting routines.
.. `_ksnkp_raw.csv`: Similar to the `_ksnkp.csv` file but contains all unfiltered knickpoint locations so that users can develop their own extraction algorithms.
.. `_ksnkp_SK.csv`: This files contains basic information about each source keys, its length for instance, and speed up the plotting routines when selecting specific channel length.
