:numbered:


== Plotting
Running the code will produce many ouput files. This section details the automated plotting routines we provided and used for the paper. For a more advance use, I'll write a description of each output files and how to play with it using Python, Matplotlib,  Pandas and an homemade OO code.

=== The philosophy

We provide automated and open-source plotting option using Python code and pakages. Many plotting option are automated thanks to the formatted outputs from the `c++` code and does not require coding to be used. Pltting routines are accessible via command line and propose a range of customization. For advanced plotting, we recommend to code directly in Python as Matplotlib package produce amazing publication-ready figures.

=== How to plot

.Quick guide if you already know what you are doing
*****************************************************************************

Here is a quick overview of how to run the plotting routines:

. In a terminal, you need first to navigate to the LSDMappingTools folder, depending on your OS, you need to use the equivalent of `cd`. example on linux: `cd /home/boris/Desktop/LSDMappingTools/`, or on Windows: `cd C:\windows\something\LSDMappingTools\`

. All the plotting routine have a common start: you need to call the python script and flag the *path* and *common prefix* of all the files as follow: `python PlotKnickpointAnalysis -dir /home/boris/Desktop/GIS/massif_central/ -fname massif_central_DEM`

. The second step is optional: you can select specific river to plot: `-basin_keys 1,5` will only select the basin 1 and 5; `-source_keys 54,0,12,18` will only select rivers 54,0,12 and 18 and finally `-min_sl 10000` will only select rivers with a flowing length > 10000 metres. None of these flags means all selected.
. `-rasplot True` will plot three maps: a topographic map, a knickpoint map with the river network drapped on the shaded elevation and a knickpoint map with the river network on black background.
. `-rivplot True` will plot two river profile per river selected (*It can take a lot of time and produce many files if you don't sort your rivers*) in $\chi&-elevation and long profile representation. This can be customized with `-segelev True` to plot the segmented elevation of the river to assess if the segment-fitting paramters (e.g. `target_nodes`) are suitting user's precision requirements.
. `-basplot True` will plot two plots per basin selected, in $\chi&-elevation and long profile representation.
. `-statplot True` will plot histogram distributions of stepped knickpoints and $\Delta k_{sn}$. It provides a first order statistical description to sort knickpoints. It can be customized with `-nbh 80` to force a number of bins.
. `-ksnPs True` is a calibrating plotting option that plots a $\chi - k_{sn}$ profile with raw and denoised $k_{sn}$ in order to check $\lambda$ effect.
. `-cov 3,5,2` is a parameter that apply a basic cut off value on the knickpoints, in order to select the main ones. In this example it will select knickpoint with  $\Delta k_{sn}<-3$, $\Delta k_{sn}>5$ and $\Deltaz_{seg}>2$.
. `-GS 2.1,5,3.4,45` sets a common relative size of break-in-slope knickpoints along all the figures. On this example, it set all the knickpoints <=2.1 with a size of 5, all the knickpoints > 3.4 with a size of 45 and all the intermediate with an adapted size.
. Finally `-all true` will plot all the option above. `-allD True` add some debugging plot such as ksn profiles.

*****************************************************************************

The knickpoint algorithm produces large datasets. We provide available plotting routines to help the user dealing with this. These routines can help having a first overview of the data, statistical description, thin the dataset, and produce publication-ready plots thanks to `matplotlib` python package. All the routines are implemented into the LSDMappingTools suite. We will describe these plotting routines with an applied example from the paper: The Smugglers basin (Santa Cruz Island, USA).

==== The basis

The plotting routines are accessible via command-line or as a python package (*I aim to have a conda package at the time of the submission, I am not far from it*). The first thing you need to do is accessing the LSDMappingTools folder via your terminal (*REFERENCE TO THE ACTUAL TUTO TO INSTALL LSDMT*). The command-lin tool can be called by running the python script `PlotKnickpointAnalysis.py`. All the plotting functions within this tool need to begin with the path and prefix of your files using the flags `-dir` and `-fname` as follow:

+
[source]
----
$ python PlotKnickpointAnalysis -dir /home/Triceratops/Desktop/LSD/ -fname smugglers
----
+

Just running this will not produce anything, but will display all the available options that we will describe along this tutorial - guide - documentation. 

==== First maps

The first visualisation you probably want is a map of the knickpoints. The `-rasplot` flag will produce a set of maps with the knickpoints on top and a topographic map.

+
[source]
----
$ python PlotKnickpointAnalysis -dir /home/Triceratops/Desktop/LSD/ -fname smugglers -rasplot True
----
+

As you will notice, the output is fairly dense. A first adjustment consists in thinning your dataset would be to select a set of river rather than the entire network. You can select the network by basin ID with the flag `-basin_keys`, by sources `-source_keys` and/or by minimum flow distance with `-min_sl`. These option are cumulative. The following example select only the sources 34, 56 and 756 in the basin 21:

+
[source]
----
$ python PlotKnickpointAnalysis -dir /home/Triceratops/Desktop/LSD/ -fname smugglers -rasplot True -source_keys 34,56,756 -basin_keys 21
----
+

Or more generally if you just want the river >5000 metres long:

+
[source]
----
$ python PlotKnickpointAnalysis -dir /home/Triceratops/Desktop/LSD/ -fname smugglers -rasplot True -min_sl 5000
----
+

Alright, We still have a lot of knickpoints, but in less rivers now. Now let's get interested on how to thin the dataset.

==== Statistical descriptions

A basic but efficient data description is an histogram. The flag `-statplot` will generates a set of 2 histograms: one describing the spread of delta ksn, the break-in-slope component, and the other describing the spread of delta segmented elevation.

+
[source]
----
$ python PlotKnickpointAnalysis -dir /home/Triceratops/Desktop/LSD/ -fname smugglers -statplot True -min_sl 5000
----
+

These histograms automatically choose the number of bins on the histogram. It is however possible to customize that parameter with the flag `-nbh` to precise the number of bins. 

These plots can offer a first-order idea of the knickpoint values. You shall now pick from these cut-off values to isolate your main knickpoints.

==== Quantitative selection of knickpoints

One could use the histogram distribution of the data to extract cut-off values to isolate the main knickpoints, or use its own statistical tools, the flag `-cov` will remove knickpoints using their values. 3 values have to be precised with the flag: the first is a minimum value for the negative delta ksn, the second is for the minimum value for the positive delta ksn and the third the minimum for delta segmented elevation. The following example remove knickpoints  with a delta ksn < -2, delta ksn > 3 and delta segmented elevation > 5 (and plot a map):

+
[source]
----
$ python PlotKnickpointAnalysis -dir /home/Triceratops/Desktop/LSD/ -fname smugglers -rasplot True -min_sl 5000 -cov 2,3,5
----
+

Ok, you know have now a fair selection of knickpoints, you may want to customise the appeareance of the plot, for extensive customisations you can directly use the python Object Oriented dedicated code. The following flags can be added to help with map plotting:

[cols="1,1", options="header"]
.Map customisation flags
|===
|Flags
|Effects

|`-coeff_size_kp`
|Default: 1, increase/decrease the size of all the knickpoints.


|`-GS`
|Manage the relative size of the knickpoints. DWE: `-GS 2.1,5,4.6,50` would set all the knickpoints<2.1 to 5, >4.6 to 50.



|TODO
|Add the rest

|===


==== Profile plots

Complementary to the map plots, you can generate river profiles with the `-rivplot` flag. It produces for each selected source ID a chi-elevation and a long profile with the selected knickpoints on top.

+
[source]
----
$ python PlotKnickpointAnalysis -dir /home/Triceratops/Desktop/LSD/ -fname smugglers -rasplot True -min_sl 5000 -cov 2,3,5
----
+

Ok I'll need to expand that after Romania.


=== Plotting with other tools (e.g. GIS)

One could want to plot the output by oneself. The Algorithm produce a set of raster and csv files that one can import and plot with other plotting routine. `X` being the prefix of all the output, the algorithm generates additional rasters: hillshaded DEM `X_hs.bil` and delimination of analysed basins `X_AllBasins.bil`. 

It also generates the point-based data. `X_ksnkp_mchi.csv` contains all the river-related data:

[cols="1,1", options="header"]
.X_ksnkp_mchi.csv
|===
|Column
|Data

|X
|Easting in UTM (Same zone than the Raster).

|Y
|Northing in UTM (Same zone than the Raster).

|Longitude
|Longitude in WGS84.

|Latitude
|Latitude in WGS84.

|chi
|The chi coordinate.

|elevation
|Elevation of the river point in meters.

|flow_distance
|Flowing distance from the outlet in meters.

|drainage_area
|Drainage area of the point in meter square.

|m_chi
|Chi-elevation steepness calculated with Mudd et al., 2014 JGR algorithm. Is k_sn if A0 = 1.

|source_key
|Unique ID of this river, from source to the point where it reaches a longer river or the outlet of the basin.

|basin_key
|Unique basin ID.

|Other Columns
|Other columns are for debugguing purposes, Ignore them, I'll remove them after the publication of the paper.

|===

`X_ksnkp.csv` contains all the knickpoint-related data:

[cols="1,1", options="header"]
.X_ksnkp.csv
|===
|Column
|Data

|X
|Easting in UTM (Same zone than the Raster).

|Y
|Northing in UTM (Same zone than the Raster).

|Longitude
|Longitude in WGS84.|Longitude
|Longitude in WGS84

|Latitude
|Latitude in WGS84.

|chi
|The chi coordinate.

|elevation
|Elevation of the river point in meters.

|flow_distance
|Flowing distance from the outlet in meters.

|drainage_area
|Drainage area of the point in meter square.

|delta_ksn
|Magnitude of the knickpoint "slope-break" component quantified by it's drop/increase of ksn.

|delta_segelev
|Magnitude of the knickpoint "vertical-step" component quantified by sharp increase of segmented elevation.

|sharpness
|Cumulated Chi distance between all the combined knickpoints. 0 for single knickpoint.

|sign
|1 if increase of delta_ksn, -1 if decrease.

|source_key
|Unique ID of this river, from source to the point where it reaches a longer river or the outlet of the basin.

|basin_key
|Unique basin ID.

|Other Columns
|Other columns are for debugguing purposes, Ignore them, I'll remove them after the publication of the paper.

|===


The two other files are to help the automated plotting routines to be faster.


