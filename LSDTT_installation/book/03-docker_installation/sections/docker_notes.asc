=== Some notes on Docker

The direction of travel in portability seems to be away from https://www.vagrantup.com/[Vagrant] and toward https://www.docker.com/[Docker]. We are not quite sure why this is, since the https://docs.docker.com/[docker documentation] is similar to documentation for the https://www.youtube.com/watch?v=rLDgQg6bq7o[turbo encabulator]. There are many people quite willing to mansplain why Docker is better but before you feel the urge to do that, please refrain: we have drank a bit of the kool-aid and have been testing *LSDTopoTools* with docker. 

==== Docker on Linux

After you install docker on Linux, you will need to add users to the docker permissions:

[source,console]
----
$ sudo usermod -a -G docker $USER
----

Once you have done this you will need to log out and log back in again. 


==== Docker for Windows

I have not made any scientific study of this but most *LSDTopoTools* users are on Windows operating systems. 

Firstly, you need to have *Windows 10 enterprise*. It will not work otherwise. 

Second, if you have that and have it installed, you also need to add yourself to the `docker-users` group. To do that, do this (instructions from here: https://github.com/docker/for-win/issues/868):

. Logon to Windows as Administrator
. Go to Windows Administrator Tools
. Look for Windows Computer Management and click on it.
. Or you can skip steps 1, right mouse clicking Computer Management, go to more, and select run as administrator and provide Administrator password.
. Double click docker-users group and add your account as member.
. Also add your account to Hyper-V Administrator. This was added when you installed docker for Windows.
. Log off from Windows and log back on.
. Click on Windows icon on bottom left and start Docker for Windows. This will start docker windows service.
. Start Windows Powershell and type docker --version. It will show Docker version 17.09.1-ce, build 19e2cf6. This is the latest version.

==== Building a base image

By the time these notes go online, there should be a functioning docker image that you can download from the docker hub.
The instructions will be clear and users can just start running *LSDTopoTools* from within docker.
These notes exists as something of a history or cheat sheet of how we made the base image. 

Before we do anything, you should look at some notes about running a functioning image of ubuntu: 
http://phusion.github.io/baseimage-docker/ 

I have no idea if that stuff is important! 
But we will try to test images that both include and don't incude a fully formed startup environment. 

The other big issue with docker is the volume syncing. This is ore difficult to understand syncing in vagrant. 

===== A simple docker image

So basically for *LSDTopoTools* functionality we might want a few different base images:

* An image just for the pass:[c++] code.
* An image just for the python scripts.
* An image just for building documentation.
* An image with everything installed.

The reason why we might separate the first three images is because the python image will be *HUGE* whereas the *LSDTopoTools* source code is small. 
So people might want to be offered a slimm version. 

Lets start with a very simple python image. 
The docker documentation for getting you started up is not so useful because they are written to get you running an app in the docker box. For our purposes we want:

. To log into to the docker container via ssh or access it as though you have a little linux box running
. To be able to access you file system (we don't want to be having to ftp files in an out of the container each time or worse yet losing all our work when the docker session ends). 

For python, we could go with a full python build but that results in very large containers (over a GB). 
We will https://blog.realkinetic.com/building-minimal-docker-containers-for-python-applications-37d0272c52f3[follow advice for a minimal python installation]. For this we will use the https://hub.docker.com/_/alpine/[Alpine base box].

. First, create a directory that will contain the files you need. I'll call it `python_test`.
. Go into this directory. You will keep something called a `dockerfile` in this directory. 
It has instructions for what stuff is included in the container. 
We will start with an incredibly simple one. Create the follwoing textfile, called `dockerfile`:
+
[source,dockerfile]
----
FROM python:3.6-alpine

COPY . /app
WORKDIR /app
----
+
. Before we do anything we need to `build` the container. You build it with some name, like:
+
[source,console]
----
$ docker build -t chumbucket .
----
+ 
In this command, the `-t` tells docker to tag the container, the `chumbucket` gives the container its tag, and the `.` means that you want to call the `Dockerfile` from this directory. 
+
. This downloads some stuff and then hopefully tells you the container is sucessfully built. You can look at it with `docker image ls`.
+
. You need to actually run the image if you want to do anything with it:
+
[source,console]
----
$ docker run -it chumbucket sh
----
+
The `-it` means `interctive` and `tag` and you give it the tag. You then tell it to run the shell (`sh`). 