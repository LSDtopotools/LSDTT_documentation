:numbered:
=== Obtaining the code and running analysis from coupled hillslope and channel analysis

Coupled channel-hillslope analysis occers by first extracting the channel properties and then mapping hillslope properties onto this channel network. 

==== Getting channel information

. First, you need to extract a channel network. If you have lidar data and you want to know exactly where the channels are, use one of our link:LSDTT_channel_extraction.html#_the_channel_extraction_tool[channel network algorithms]. The link:LSDTT_channel_extraction.html#_the_channel_extraction_tool[wiener method] is both https://agupubs.onlinelibrary.wiley.com/doi/abs/10.1002/2013WR015167[accurate] and https://www.earth-surf-dynam.net/4/627/2016/[does not vary much as a function of grid resolution] so we recommend using this method. If you do extract a channel network you will need the `channel heads csv file` to load into the next step.
+
.. As a brief note, to get a Wiener network, you set the parameter `print_wiener_channels: true`. 
.. The sources or channel heads file will have the extension `Wsources.csv`.

. Second, you should constrain the concavity index of the landscape. To do this use our link:LSDTT_chi_analysis.html#_calculating_concavity[concavity index tool]. Note that there are three main options for selecting basins:
+
.. You can print a junction index raster and selects the junction numbers you want. This requires a junction file, which is a text file that simply lists the junction numbers you want, and you need to set the parameter `baselevel junctions fname: my_jncs.txt`. The text file can be a list of space or comma separated junctions.  
.. You can create a csv file that has latitude and longitude of the basin outlets. To get this to work set the paramters `get_basins_from_outlets: true` and `basin_outlet_csv: test_basins2.csv`. Natually you will need to adjust the name of the file. The file *MUST* have a column named `latitude` and a column named `longitude` and these must be in WGS84 coordinates. 
.. You can use the link:LSDTT_chi_analysis.html#_selecting_channels_and_basins[basin selection options].
+
. Once you have a channel network and a concavity, link:LSDTT_chi_analysis.html#_getting_the_software[extract the segmented channel profile]. You need to make sure the switches `print_segments: true` and `print_segments_raster: true` are included in the parameter file

. Once you have done all that, you should have a number of new files along with your original rasters. The ones needed for the channel-hillslope coupling are
+
* The channel heads file if you are using an extracted channel network (a `HEADS.csv` file) 
* A channel segments raster `_SEGMENTS.bil` that is derived from the run of *chi mapping tool* with the `print_segments: true` and `print_segments_raster: true` parameters in the parameter file. 
+
. These files are ingested by the code `make_spaghetti.cpp`, the instructions of which are below. 

==== Making spaghetti 

Wait, what is all this about spaghetti? One of the plots we make using the hillslope-channel analysis looks a bit like spaghetti, so we call these spaghetti plots, and the code used to get the data for these plots is called `make_spaghetti.cpp`. Hungry yet? It is better to run these analyses on a full stomach. 

The code is located in the repository *NEED REPO*.

Simply run:

[source,console]
----
$ make -f THEMAKEFILE
----

and you will be rewarded with a program called `THEPROGRAM.exe`.

Like almost all analyses packages in *LSDTopoTools*, this runs with a parameterfile. The typical call to the program will be:

[source,console]
----
$ ./chc.exe /path/to/paramfile name_of_paramfile.param
----
