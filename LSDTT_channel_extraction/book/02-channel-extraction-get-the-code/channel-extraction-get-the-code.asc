== Get the code for channel extraction

Our code for channel extraction can be found in our https://github.com/LSDtopotools/LSDTopoTools_ChannelExtraction[GitHub repository].  This repository contains code for extracting channel networks using a variety of different methods ranging from simple contributing area thresholds to more complex geometric and theoretical approaches for extracting channels from high-resolution datasets.

=== Getting LSDTopoTools 2

. Follow the link:LSDTT_installation[LSDTopoTools installation instructions].
. The channel extraction code is called `lsdtt-channel-extraction`. 

.Quickstart installation
************************************
If you have installed *LSDTopoTools* before, or are familair with Docker, here are very quick instructions.

. Install Docker
. Make a directory to hold all your *LSDTopoTools* code and data. 
. Pull and start the LSDTopoTools container (in the below command it assumes you have put your *LSDTopoTools* directory in `C:/LSDTopoTools`:
+
[source,console]
----
$ docker run --rm -it -v C:/LSDTopoTools:/LSDTopoTools lsdtopotools/lsdtt_pcl_docker
----
+
. In the docker container, run the script `Start_LSDTT.sh`
. You are ready to go!
************************************

=== Example datasets 
We have provided some example datasets which you can use in order to test the channel extraction algorithms. In this tutorial we will work using a lidar dataset from Indian Creek, Ohio. 

. You need to get the data from github. 
. The program `git` is installed in our docker conatiner so it is probably most useful to get the datasets via the docker container. If you are in native Linux you probably know what you are doing, so just adapt these instructions to your terminal environment. 
. In the docker container (indicated by the `#` command prompt) make a directory for your data. Here is a suggestion:
+
[source,console]
----
# cd /LSDTopoTools
# mkdir data
# cd data
----
+
. Now clone the test data

.If you are using a Vagrant server
[source,console]
----
$ cd /LSDTopoTools/Topographic_projects/Test_data
----

The DEM is called `indian_creek.bil` and `indian_creek.hdr`, and the relevant parameter file is `Vagrant_ChannelExtraction.driver`.

This dataset is already in the preferred format for use with LSDTopoTools (the ENVI `bil` format). The figure below shows a shaded relief map of part of the Indian Creek DEM which will be used in these examples.

.Shaded relief image of Indian Creek catchment, Ohio USA, UTM Zone 17N
image::images/ind_map.png[Shaded relief map of Indian Creek]

NOTE: You can also work with the DEM `gabilan.bil` that is included by default in the `/LSDTopoTools/Topographic_projects/Test_data` folder but you will need tochange the parameter files to reflect the different DEM name.

